//
// UserLocationAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserLocationAPI {

    /**
     获取位置详情
     
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocation(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GeoLocationModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取位置详情
     - GET /UserLocation/{appKey}/{id}
     - 根据位置ID获取位置详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<GeoLocationModelApiResponse> 
     */
    open class func userLocationWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<GeoLocationModelApiResponse> {
        var localVariablePath = "/UserLocation/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeoLocationModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除位置
     
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocationDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除位置
     - DELETE /UserLocation/{appKey}/{id}
     - 根据位置ID删除位置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userLocationDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserLocation/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加位置
     
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocationPost(appKey: String, geoLocationModel: GeoLocationModel? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLocationPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationPostWithRequestBuilder(appKey: appKey, geoLocationModel: geoLocationModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加位置
     - POST /UserLocation/{appKey}
     - 添加新的位置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - returns: RequestBuilder<UserLocationPostResultApiResponse> 
     */
    open class func userLocationPostWithRequestBuilder(appKey: String, geoLocationModel: GeoLocationModel? = nil) -> RequestBuilder<UserLocationPostResultApiResponse> {
        var localVariablePath = "/UserLocation/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: geoLocationModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLocationPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新位置
     
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocationPut(id: Int64, appKey: String, geoLocationModel: GeoLocationModel? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationPutWithRequestBuilder(id: id, appKey: appKey, geoLocationModel: geoLocationModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新位置
     - PUT /UserLocation/{appKey}/{id}
     - 此方法用于更新指定位置ID的位置信息。如果位置不存在，则创建一个新的位置。
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userLocationPutWithRequestBuilder(id: Int64, appKey: String, geoLocationModel: GeoLocationModel? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserLocation/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: geoLocationModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取位置列表
     
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter type: (query) 分类 (optional)
     - parameter x: (query) 纬度 (optional)
     - parameter y: (query) 经度 (optional)
     - parameter sphere: (query) 附近距离，单位：米 (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocations(appKey: String, tag: String? = nil, type: String? = nil, x: Double? = nil, y: Double? = nil, sphere: Int64? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLocationsResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationsWithRequestBuilder(appKey: appKey, tag: tag, type: type, x: x, y: y, sphere: sphere, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取位置列表
     - GET /UserLocation/{appKey}
     - 根据条件获取位置列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter type: (query) 分类 (optional)
     - parameter x: (query) 纬度 (optional)
     - parameter y: (query) 经度 (optional)
     - parameter sphere: (query) 附近距离，单位：米 (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserLocationsResultApiResponse> 
     */
    open class func userLocationsWithRequestBuilder(appKey: String, tag: String? = nil, type: String? = nil, x: Double? = nil, y: Double? = nil, sphere: Int64? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserLocationsResultApiResponse> {
        var localVariablePath = "/UserLocation/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "x": (wrappedValue: x?.encodeToJSON(), isExplode: true),
            "y": (wrappedValue: y?.encodeToJSON(), isExplode: true),
            "sphere": (wrappedValue: sphere?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLocationsResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
