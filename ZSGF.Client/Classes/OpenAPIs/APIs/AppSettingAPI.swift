//
// AppSettingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AppSettingAPI {

    /**
     获取服务分组详情
     
     - parameter id: (path) 服务分组ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingGroup(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceGroupApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingGroupWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务分组详情
     - GET /AppSetting/{appKey}/Groups/{id}
     - 根据服务分组ID获取服务分组详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务分组ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<ServiceGroupApiResponse> 
     */
    open class func appServiceSettingGroupWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<ServiceGroupApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceGroupApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除服务分组
     
     - parameter id: (path) 服务分组ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingGroupDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingGroupDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除服务分组
     - DELETE /AppSetting/{appKey}/Groups/{id}
     - 根据服务分组ID删除服务分组
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务分组ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appServiceSettingGroupDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加服务分组
     
     - parameter appKey: (path)  
     - parameter serviceGroup: (body) 服务分组信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingGroupPost(appKey: String, serviceGroup: ServiceGroup? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppSettingGroupPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingGroupPostWithRequestBuilder(appKey: appKey, serviceGroup: serviceGroup).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加服务分组
     - POST /AppSetting/{appKey}/Groups
     - 添加新的服务分组信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter serviceGroup: (body) 服务分组信息 (optional)
     - returns: RequestBuilder<AppSettingGroupPostResultApiResponse> 
     */
    open class func appServiceSettingGroupPostWithRequestBuilder(appKey: String, serviceGroup: ServiceGroup? = nil) -> RequestBuilder<AppSettingGroupPostResultApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Groups"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceGroup)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppSettingGroupPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新服务分组
     
     - parameter id: (path) 服务分组ID 
     - parameter appKey: (path)  
     - parameter serviceGroup: (body) 服务分组信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingGroupPut(id: Int64, appKey: String, serviceGroup: ServiceGroup? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingGroupPutWithRequestBuilder(id: id, appKey: appKey, serviceGroup: serviceGroup).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新服务分组
     - PUT /AppSetting/{appKey}/Groups/{id}
     - 根据服务分组ID更新服务分组信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务分组ID 
     - parameter appKey: (path)  
     - parameter serviceGroup: (body) 服务分组信息 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appServiceSettingGroupPutWithRequestBuilder(id: Int64, appKey: String, serviceGroup: ServiceGroup? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceGroup)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务分组列表
     
     - parameter appKey: (path)  
     - parameter providerId: (query) 服务商ID (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingGroups(appKey: String, providerId: Int64? = nil, showFlag: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceGroupListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingGroupsWithRequestBuilder(appKey: appKey, providerId: providerId, showFlag: showFlag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务分组列表
     - GET /AppSetting/{appKey}/Groups
     - 根据服务商ID和显示标志获取服务分组列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter providerId: (query) 服务商ID (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - returns: RequestBuilder<ServiceGroupListApiResponse> 
     */
    open class func appServiceSettingGroupsWithRequestBuilder(appKey: String, providerId: Int64? = nil, showFlag: Bool? = nil) -> RequestBuilder<ServiceGroupListApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Groups"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "providerId": (wrappedValue: providerId?.encodeToJSON(), isExplode: true),
            "showFlag": (wrappedValue: showFlag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceGroupListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     服务配置项详情
     
     - parameter id: (path) 服务配置项ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingItem(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceItemApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingItemWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     服务配置项详情
     - GET /AppSetting/{appKey}/Items/{id}
     - 根据服务配置项ID获取服务配置项详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务配置项ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<ServiceItemApiResponse> 
     */
    open class func appServiceSettingItemWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<ServiceItemApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceItemApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除服务配置项
     
     - parameter id: (path) 服务配置项ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingItemDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingItemDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除服务配置项
     - DELETE /AppSetting/{appKey}/Items/{id}
     - 根据服务配置项ID删除服务配置项
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务配置项ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appServiceSettingItemDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加服务配置项
     
     - parameter appKey: (path)  
     - parameter serviceItem: (body) 服务配置项信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingItemPost(appKey: String, serviceItem: ServiceItem? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppSettingItemPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingItemPostWithRequestBuilder(appKey: appKey, serviceItem: serviceItem).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加服务配置项
     - POST /AppSetting/{appKey}/Items
     - 添加新的服务配置项信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter serviceItem: (body) 服务配置项信息 (optional)
     - returns: RequestBuilder<AppSettingItemPostResultApiResponse> 
     */
    open class func appServiceSettingItemPostWithRequestBuilder(appKey: String, serviceItem: ServiceItem? = nil) -> RequestBuilder<AppSettingItemPostResultApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Items"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceItem)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppSettingItemPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新服务配置项
     
     - parameter id: (path) 服务配置项ID 
     - parameter appKey: (path)  
     - parameter serviceItem: (body) 服务配置项信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingItemPut(id: Int64, appKey: String, serviceItem: ServiceItem? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingItemPutWithRequestBuilder(id: id, appKey: appKey, serviceItem: serviceItem).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新服务配置项
     - PUT /AppSetting/{appKey}/Items/{id}
     - 根据服务配置项ID更新服务配置项信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务配置项ID 
     - parameter appKey: (path)  
     - parameter serviceItem: (body) 服务配置项信息 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appServiceSettingItemPutWithRequestBuilder(id: Int64, appKey: String, serviceItem: ServiceItem? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceItem)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     服务配置项列表
     
     - parameter appKey: (path)  
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingItems(appKey: String, bizCode: String? = nil, providerCode: String? = nil, groupCode: String? = nil, showFlag: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceItemListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingItemsWithRequestBuilder(appKey: appKey, bizCode: bizCode, providerCode: providerCode, groupCode: groupCode, showFlag: showFlag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     服务配置项列表
     - GET /AppSetting/{appKey}/Items
     - 根据业务代码、服务商代码、分组代码和显示标志获取服务配置项列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - returns: RequestBuilder<ServiceItemListApiResponse> 
     */
    open class func appServiceSettingItemsWithRequestBuilder(appKey: String, bizCode: String? = nil, providerCode: String? = nil, groupCode: String? = nil, showFlag: Bool? = nil) -> RequestBuilder<ServiceItemListApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Items"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bizCode": (wrappedValue: bizCode?.encodeToJSON(), isExplode: true),
            "providerCode": (wrappedValue: providerCode?.encodeToJSON(), isExplode: true),
            "groupCode": (wrappedValue: groupCode?.encodeToJSON(), isExplode: true),
            "showFlag": (wrappedValue: showFlag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceItemListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务商详情
     
     - parameter id: (path) 服务商ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingProvider(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceProviderApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingProviderWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务商详情
     - GET /AppSetting/{appKey}/Providers/{id}
     - 根据服务商ID获取服务商详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务商ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<ServiceProviderApiResponse> 
     */
    open class func appServiceSettingProviderWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<ServiceProviderApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Providers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceProviderApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除服务商
     
     - parameter id: (path) 服务商ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingProviderDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingProviderDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除服务商
     - DELETE /AppSetting/{appKey}/Providers/{id}
     - 根据服务商ID删除服务商
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务商ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appServiceSettingProviderDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Providers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加服务商
     
     - parameter appKey: (path)  
     - parameter serviceProvider: (body) 服务商信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingProviderPost(appKey: String, serviceProvider: ServiceProvider? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppSettingProviderPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingProviderPostWithRequestBuilder(appKey: appKey, serviceProvider: serviceProvider).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加服务商
     - POST /AppSetting/{appKey}/Providers
     - 添加新的服务商信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter serviceProvider: (body) 服务商信息 (optional)
     - returns: RequestBuilder<AppSettingProviderPostResultApiResponse> 
     */
    open class func appServiceSettingProviderPostWithRequestBuilder(appKey: String, serviceProvider: ServiceProvider? = nil) -> RequestBuilder<AppSettingProviderPostResultApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Providers"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceProvider)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppSettingProviderPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新服务商
     
     - parameter id: (path) 服务商ID 
     - parameter appKey: (path)  
     - parameter serviceProvider: (body) 服务商信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingProviderPut(id: Int64, appKey: String, serviceProvider: ServiceProvider? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingProviderPutWithRequestBuilder(id: id, appKey: appKey, serviceProvider: serviceProvider).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新服务商
     - PUT /AppSetting/{appKey}/Providers/{id}
     - 根据服务商ID更新服务商信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务商ID 
     - parameter appKey: (path)  
     - parameter serviceProvider: (body) 服务商信息 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appServiceSettingProviderPutWithRequestBuilder(id: Int64, appKey: String, serviceProvider: ServiceProvider? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Providers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceProvider)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务商列表
     
     - parameter appKey: (path)  
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appServiceSettingProviders(appKey: String, bizCode: String? = nil, showFlag: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceProviderListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appServiceSettingProvidersWithRequestBuilder(appKey: appKey, bizCode: bizCode, showFlag: showFlag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务商列表
     - GET /AppSetting/{appKey}/Providers
     - 根据业务代码和显示标志获取服务商列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - returns: RequestBuilder<ServiceProviderListApiResponse> 
     */
    open class func appServiceSettingProvidersWithRequestBuilder(appKey: String, bizCode: String? = nil, showFlag: Bool? = nil) -> RequestBuilder<ServiceProviderListApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/Providers"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bizCode": (wrappedValue: bizCode?.encodeToJSON(), isExplode: true),
            "showFlag": (wrappedValue: showFlag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceProviderListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     配置详情
     
     - parameter id: (path) 配置ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appSetting(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppSettingApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appSettingWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     配置详情
     - GET /AppSetting/{appKey}/{id}
     - 根据配置ID获取配置详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 配置ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<AppSettingApiResponse> 
     */
    open class func appSettingWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<AppSettingApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppSettingApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除配置
     
     - parameter id: (path) 配置ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appSettingDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appSettingDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除配置
     - DELETE /AppSetting/{appKey}/{id}
     - 根据配置ID删除配置
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 配置ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appSettingDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     增加配置
     
     - parameter appKey: (path)  
     - parameter appSetting: (body) 配置内容 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appSettingPost(appKey: String, appSetting: AppSetting? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppSettingSettingPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appSettingPostWithRequestBuilder(appKey: appKey, appSetting: appSetting).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     增加配置
     - POST /AppSetting/{appKey}
     - 添加新的配置内容
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter appSetting: (body) 配置内容 (optional)
     - returns: RequestBuilder<AppSettingSettingPostResultApiResponse> 
     */
    open class func appSettingPostWithRequestBuilder(appKey: String, appSetting: AppSetting? = nil) -> RequestBuilder<AppSettingSettingPostResultApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appSetting)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppSettingSettingPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新配置
     
     - parameter id: (path) 配置ID 
     - parameter appKey: (path)  
     - parameter appSetting: (body) 配置内容 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appSettingPut(id: Int64, appKey: String, appSetting: AppSetting? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appSettingPutWithRequestBuilder(id: id, appKey: appKey, appSetting: appSetting).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新配置
     - PUT /AppSetting/{appKey}/{id}
     - 根据配置ID更新配置内容
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 配置ID 
     - parameter appKey: (path)  
     - parameter appSetting: (body) 配置内容 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func appSettingPutWithRequestBuilder(id: Int64, appKey: String, appSetting: AppSetting? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appSetting)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     配置列表
     
     - parameter appKey: (path)  
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter tag: (query) 标签 (optional)
     - parameter code: (query) 配置项代码 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func appSettings(appKey: String, providerCode: String? = nil, groupCode: String? = nil, tag: String? = nil, code: String? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AppSettingListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return appSettingsWithRequestBuilder(appKey: appKey, providerCode: providerCode, groupCode: groupCode, tag: tag, code: code).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     配置列表
     - GET /AppSetting/{appKey}
     - 根据服务商代码、分组代码、标签和配置项代码获取配置列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter tag: (query) 标签 (optional)
     - parameter code: (query) 配置项代码 (optional)
     - returns: RequestBuilder<AppSettingListApiResponse> 
     */
    open class func appSettingsWithRequestBuilder(appKey: String, providerCode: String? = nil, groupCode: String? = nil, tag: String? = nil, code: String? = nil) -> RequestBuilder<AppSettingListApiResponse> {
        var localVariablePath = "/AppSetting/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "providerCode": (wrappedValue: providerCode?.encodeToJSON(), isExplode: true),
            "groupCode": (wrappedValue: groupCode?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AppSettingListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
