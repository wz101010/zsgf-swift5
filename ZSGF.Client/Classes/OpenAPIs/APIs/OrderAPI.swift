//
// OrderAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class OrderAPI {

    /**
     获取订单详情
     
     - parameter id: (path) 订单ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func order(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return orderWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取订单详情
     - GET /Order/{appKey}/{id}
     - 根据订单ID获取订单详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 订单ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<OrderApiResponse> 
     */
    open class func orderWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<OrderApiResponse> {
        var localVariablePath = "/Order/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     创建订单
     
     - parameter appKey: (path)  
     - parameter createOrderRequest: (body) 订单创建请求 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orderCreate(appKey: String, createOrderRequest: CreateOrderRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: CreateOrderResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return orderCreateWithRequestBuilder(appKey: appKey, createOrderRequest: createOrderRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     创建订单
     - POST /Order/{appKey}/Create
     - 根据请求参数创建订单
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter createOrderRequest: (body) 订单创建请求 (optional)
     - returns: RequestBuilder<CreateOrderResultApiResponse> 
     */
    open class func orderCreateWithRequestBuilder(appKey: String, createOrderRequest: CreateOrderRequest? = nil) -> RequestBuilder<CreateOrderResultApiResponse> {
        var localVariablePath = "/Order/{appKey}/Create"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createOrderRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<CreateOrderResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取订单列表
     
     - parameter appKey: (path)  
     - parameter status: (query) 订单状态 (optional)
     - parameter orderNo: (query) 系统订单号 (optional)
     - parameter tradeNo: (query) 支付平台单号 (optional)
     - parameter userId: (query) 用户ID (optional)
     - parameter pctType: (query) 商品类型 (optional)
     - parameter pctId: (query) 商品ID (optional)
     - parameter pctName: (query) 商品名称 (optional)
     - parameter skip: (query) 跳过的条数 (optional)
     - parameter take: (query) 拉取的条数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func orders(appKey: String, status: String? = nil, orderNo: String? = nil, tradeNo: String? = nil, userId: Int64? = nil, pctType: String? = nil, pctId: String? = nil, pctName: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: OrderListResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return ordersWithRequestBuilder(appKey: appKey, status: status, orderNo: orderNo, tradeNo: tradeNo, userId: userId, pctType: pctType, pctId: pctId, pctName: pctName, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取订单列表
     - GET /Order/{appKey}
     - 根据查询条件获取订单列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter status: (query) 订单状态 (optional)
     - parameter orderNo: (query) 系统订单号 (optional)
     - parameter tradeNo: (query) 支付平台单号 (optional)
     - parameter userId: (query) 用户ID (optional)
     - parameter pctType: (query) 商品类型 (optional)
     - parameter pctId: (query) 商品ID (optional)
     - parameter pctName: (query) 商品名称 (optional)
     - parameter skip: (query) 跳过的条数 (optional)
     - parameter take: (query) 拉取的条数 (optional)
     - returns: RequestBuilder<OrderListResultApiResponse> 
     */
    open class func ordersWithRequestBuilder(appKey: String, status: String? = nil, orderNo: String? = nil, tradeNo: String? = nil, userId: Int64? = nil, pctType: String? = nil, pctId: String? = nil, pctName: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<OrderListResultApiResponse> {
        var localVariablePath = "/Order/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "orderNo": (wrappedValue: orderNo?.encodeToJSON(), isExplode: true),
            "tradeNo": (wrappedValue: tradeNo?.encodeToJSON(), isExplode: true),
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "pctType": (wrappedValue: pctType?.encodeToJSON(), isExplode: true),
            "pctId": (wrappedValue: pctId?.encodeToJSON(), isExplode: true),
            "pctName": (wrappedValue: pctName?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<OrderListResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
