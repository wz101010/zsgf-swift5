//
// UserFriendsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserFriendsAPI {

    /**
     推荐相似兴趣用户
     
     - parameter appKey: (path)  
     - parameter tag: (query) 兴趣标签 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCommonInterests(appKey: String, tag: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserCommonInterestsResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCommonInterestsWithRequestBuilder(appKey: appKey, tag: tag, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     推荐相似兴趣用户
     - GET /UserFriends/{appKey}/CommonInterests
     - 推荐有共同爱好的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 兴趣标签 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserCommonInterestsResultApiResponse> 
     */
    open class func userCommonInterestsWithRequestBuilder(appKey: String, tag: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserCommonInterestsResultApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/CommonInterests"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCommonInterestsResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加关注
     
     - parameter userId: (path) 要关注的用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowUser(userId: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowUserWithRequestBuilder(userId: userId, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加关注
     - POST /UserFriends/{appKey}/Follower/{userId}
     - 关注指定用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter userId: (path) 要关注的用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userFollowUserWithRequestBuilder(userId: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/Follower/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     刷新粉丝数据
     
     - parameter id: (path) 粉丝ID 
     - parameter appKey: (path)  
     - parameter followerPutModel: (body) 更新粉丝的请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowerPut(id: Int64, appKey: String, followerPutModel: FollowerPutModel? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowerPutWithRequestBuilder(id: id, appKey: appKey, followerPutModel: followerPutModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     刷新粉丝数据
     - PUT /UserFriends/{appKey}/Follower/{id}
     - 根据粉丝ID更新粉丝信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 粉丝ID 
     - parameter appKey: (path)  
     - parameter followerPutModel: (body) 更新粉丝的请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userFollowerPutWithRequestBuilder(id: Int64, appKey: String, followerPutModel: FollowerPutModel? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/Follower/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: followerPutModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取粉丝列表
     
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter status: (query) 状态 (optional)
     - parameter targetUserId: (query) 指定用户的粉丝 (optional, default to 0)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowers(appKey: String, tag: String? = nil, status: String? = nil, targetUserId: Int64? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFollowersResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowersWithRequestBuilder(appKey: appKey, tag: tag, status: status, targetUserId: targetUserId, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取粉丝列表
     - GET /UserFriends/{appKey}/Followers
     - 根据条件获取我的粉丝列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter status: (query) 状态 (optional)
     - parameter targetUserId: (query) 指定用户的粉丝 (optional, default to 0)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserFollowersResultApiResponse> 
     */
    open class func userFollowersWithRequestBuilder(appKey: String, tag: String? = nil, status: String? = nil, targetUserId: Int64? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserFollowersResultApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/Followers"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "targetUserId": (wrappedValue: targetUserId?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserFollowersResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取关注列表 / 判断是否关注
     
     - parameter appKey: (path)  
     - parameter tag: (query) 用于过滤关注列表的标签（可选）。 (optional)
     - parameter status: (query) 用于过滤关注列表的状态（可选）。 (optional)
     - parameter targetUserId: (query) 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     - parameter skip: (query) 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     - parameter take: (query) 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     - parameter checkUserId: (query) 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     - parameter onlyIDs: (query) 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowing(appKey: String, tag: String? = nil, status: String? = nil, targetUserId: Int64? = nil, skip: Int? = nil, take: Int? = nil, checkUserId: Int64? = nil, onlyIDs: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowingWithRequestBuilder(appKey: appKey, tag: tag, status: status, targetUserId: targetUserId, skip: skip, take: take, checkUserId: checkUserId, onlyIDs: onlyIDs).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取关注列表 / 判断是否关注
     - GET /UserFriends/{appKey}/Following
     - 根据条件获取我的关注列表，或判断是否关注某个用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 用于过滤关注列表的标签（可选）。 (optional)
     - parameter status: (query) 用于过滤关注列表的状态（可选）。 (optional)
     - parameter targetUserId: (query) 指定用户的关注记录，如果不提供则默认为当前用户的关注。 (optional, default to 0)
     - parameter skip: (query) 跳过的记录数，用于分页（默认0）。 (optional, default to 0)
     - parameter take: (query) 获取的记录数，用于分页（默认10）。 (optional, default to 10)
     - parameter checkUserId: (query) 要判断是否关注的目标用户ID。如果提供此参数，方法将返回一个布尔值，表示当前用户是否关注该目标用户。 (optional)
     - parameter onlyIDs: (query) 是否只返回关注用户的ID集合，默认为false（即返回完整的关注用户信息）。 (optional, default to false)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userFollowingWithRequestBuilder(appKey: String, tag: String? = nil, status: String? = nil, targetUserId: Int64? = nil, skip: Int? = nil, take: Int? = nil, checkUserId: Int64? = nil, onlyIDs: Bool? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/Following"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "targetUserId": (wrappedValue: targetUserId?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "checkUserId": (wrappedValue: checkUserId?.encodeToJSON(), isExplode: true),
            "onlyIDs": (wrappedValue: onlyIDs?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     推荐附近用户
     
     - parameter longitude: (query) 当前用户经度坐标(WGS84坐标系) 
     - parameter latitude: (query) 当前用户纬度坐标(WGS84坐标系) 
     - parameter appKey: (path)  
     - parameter country: (query) 国家过滤条件（精确匹配） (optional)
     - parameter state: (query) 省份过滤条件（精确匹配） (optional)
     - parameter city: (query) 城市过滤条件（精确匹配） (optional)
     - parameter district: (query) 区县过滤条件（精确匹配） (optional)
     - parameter gender: (query) 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     - parameter ageS: (query) 年龄起始范围（包含，0表示不限制） (optional)
     - parameter ageE: (query) 年龄结束范围（包含，0表示不限制） (optional)
     - parameter tag: (query) 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     - parameter distance: (query) 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     - parameter skip: (query) 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     - parameter take: (query) 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFriendsNearBy(longitude: Double, latitude: Double, appKey: String, country: String? = nil, state: String? = nil, city: String? = nil, district: String? = nil, gender: String? = nil, ageS: Int? = nil, ageE: Int? = nil, tag: String? = nil, distance: Int64? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFriendsNearByResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFriendsNearByWithRequestBuilder(longitude: longitude, latitude: latitude, appKey: appKey, country: country, state: state, city: city, district: district, gender: gender, ageS: ageS, ageE: ageE, tag: tag, distance: distance, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     推荐附近用户
     - GET /UserFriends/{appKey}/NearBy
     - 根据地理位置坐标和多种筛选条件，查询附近满足条件的用户列表，支持分页和按距离排序。 地理位置查询使用MySQL的ST_Distance_Sphere函数计算球面距离。 注意：longitude为经度(X轴)，latitude为纬度(Y轴)，参数顺序与常规坐标系一致
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter longitude: (query) 当前用户经度坐标(WGS84坐标系) 
     - parameter latitude: (query) 当前用户纬度坐标(WGS84坐标系) 
     - parameter appKey: (path)  
     - parameter country: (query) 国家过滤条件（精确匹配） (optional)
     - parameter state: (query) 省份过滤条件（精确匹配） (optional)
     - parameter city: (query) 城市过滤条件（精确匹配） (optional)
     - parameter district: (query) 区县过滤条件（精确匹配） (optional)
     - parameter gender: (query) 性别过滤条件（可选值示例：Male/Female/Other） (optional)
     - parameter ageS: (query) 年龄起始范围（包含，0表示不限制） (optional)
     - parameter ageE: (query) 年龄结束范围（包含，0表示不限制） (optional)
     - parameter tag: (query) 兴趣标签过滤（支持模糊匹配，如：\&quot;运动\&quot;） (optional)
     - parameter distance: (query) 搜索半径（单位：米，0表示不限制距离） (optional, default to 0)
     - parameter skip: (query) 跳过的记录数（分页起始位置，默认0） (optional, default to 0)
     - parameter take: (query) 获取的记录数（分页大小，默认10，最大100） (optional, default to 10)
     - returns: RequestBuilder<UserFriendsNearByResultApiResponse> 
     */
    open class func userFriendsNearByWithRequestBuilder(longitude: Double, latitude: Double, appKey: String, country: String? = nil, state: String? = nil, city: String? = nil, district: String? = nil, gender: String? = nil, ageS: Int? = nil, ageE: Int? = nil, tag: String? = nil, distance: Int64? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserFriendsNearByResultApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/NearBy"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "longitude": (wrappedValue: longitude.encodeToJSON(), isExplode: true),
            "latitude": (wrappedValue: latitude.encodeToJSON(), isExplode: true),
            "country": (wrappedValue: country?.encodeToJSON(), isExplode: true),
            "state": (wrappedValue: state?.encodeToJSON(), isExplode: true),
            "city": (wrappedValue: city?.encodeToJSON(), isExplode: true),
            "district": (wrappedValue: district?.encodeToJSON(), isExplode: true),
            "gender": (wrappedValue: gender?.encodeToJSON(), isExplode: true),
            "ageS": (wrappedValue: ageS?.encodeToJSON(), isExplode: true),
            "ageE": (wrappedValue: ageE?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "distance": (wrappedValue: distance?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserFriendsNearByResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     推荐共同粉丝用户
     
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userMutualFollowers(appKey: String, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserMutualFollowersResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userMutualFollowersWithRequestBuilder(appKey: appKey, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     推荐共同粉丝用户
     - GET /UserFriends/{appKey}/MutualFollowers
     - 推荐有共同粉丝的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserMutualFollowersResultApiResponse> 
     */
    open class func userMutualFollowersWithRequestBuilder(appKey: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserMutualFollowersResultApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/MutualFollowers"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserMutualFollowersResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     推荐共同关注用户
     
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userMutualFollowings(appKey: String, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserMutualFollowingsResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userMutualFollowingsWithRequestBuilder(appKey: appKey, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     推荐共同关注用户
     - GET /UserFriends/{appKey}/MutualFollowings
     - 推荐有共同关注的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserMutualFollowingsResultApiResponse> 
     */
    open class func userMutualFollowingsWithRequestBuilder(appKey: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserMutualFollowingsResultApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/MutualFollowings"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserMutualFollowingsResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取用户资料
     
     - parameter userId: (path) 用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userProfileById(userId: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetUserProfileResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userProfileByIdWithRequestBuilder(userId: userId, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取用户资料
     - GET /UserFriends/{appKey}/Profile/{userId}
     - 用于他人主页展示
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter userId: (path) 用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<GetUserProfileResultApiResponse> 
     */
    open class func userProfileByIdWithRequestBuilder(userId: Int64, appKey: String) -> RequestBuilder<GetUserProfileResultApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/Profile/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetUserProfileResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     取消关注
     
     - parameter userId: (path) 要取消关注的用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUnfollowUser(userId: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUnfollowUserWithRequestBuilder(userId: userId, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     取消关注
     - DELETE /UserFriends/{appKey}/Follower/{userId}
     - 取消关注指定用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter userId: (path) 要取消关注的用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userUnfollowUserWithRequestBuilder(userId: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserFriends/{appKey}/Follower/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
