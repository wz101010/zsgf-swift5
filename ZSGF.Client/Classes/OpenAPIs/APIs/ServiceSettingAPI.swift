//
// ServiceSettingAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ServiceSettingAPI {

    /**
     获取配置详情
     
     - parameter id: (path) 配置ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSetting(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: SettingsApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取配置详情
     - GET /ServiceSetting/{id}
     - 根据配置ID获取配置详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 配置ID 
     - returns: RequestBuilder<SettingsApiResponse> 
     */
    open class func serviceSettingWithRequestBuilder(id: Int64) -> RequestBuilder<SettingsApiResponse> {
        var localVariablePath = "/ServiceSetting/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SettingsApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除配置
     
     - parameter id: (path) 配置ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingDelete(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除配置
     - DELETE /ServiceSetting/{id}
     - 根据配置ID删除配置
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 配置ID 
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingDeleteWithRequestBuilder(id: Int64) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务分组详情
     
     - parameter id: (path) 服务分组ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingGroup(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceGroupApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingGroupWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务分组详情
     - GET /ServiceSetting/Groups/{id}
     - 根据服务分组ID获取服务分组详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务分组ID 
     - returns: RequestBuilder<ServiceGroupApiResponse> 
     */
    open class func serviceSettingGroupWithRequestBuilder(id: Int64) -> RequestBuilder<ServiceGroupApiResponse> {
        var localVariablePath = "/ServiceSetting/Groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceGroupApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除服务分组
     
     - parameter id: (path) 服务分组ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingGroupDelete(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingGroupDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除服务分组
     - DELETE /ServiceSetting/Groups/{id}
     - 根据服务分组ID删除服务分组
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务分组ID 
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingGroupDeleteWithRequestBuilder(id: Int64) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/Groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加服务分组
     
     - parameter serviceGroup: (body) 服务分组实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingGroupPost(serviceGroup: ServiceGroup? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceSettingGroupPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingGroupPostWithRequestBuilder(serviceGroup: serviceGroup).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加服务分组
     - POST /ServiceSetting/Groups
     - 添加新的服务分组
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter serviceGroup: (body) 服务分组实体 (optional)
     - returns: RequestBuilder<ServiceSettingGroupPostResultApiResponse> 
     */
    open class func serviceSettingGroupPostWithRequestBuilder(serviceGroup: ServiceGroup? = nil) -> RequestBuilder<ServiceSettingGroupPostResultApiResponse> {
        let localVariablePath = "/ServiceSetting/Groups"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceGroup)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceSettingGroupPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新服务分组
     
     - parameter id: (path) 服务分组ID 
     - parameter serviceGroup: (body) 服务分组实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingGroupPut(id: Int64, serviceGroup: ServiceGroup? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingGroupPutWithRequestBuilder(id: id, serviceGroup: serviceGroup).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新服务分组
     - PUT /ServiceSetting/Groups/{id}
     - 根据服务分组ID更新服务分组信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务分组ID 
     - parameter serviceGroup: (body) 服务分组实体 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingGroupPutWithRequestBuilder(id: Int64, serviceGroup: ServiceGroup? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/Groups/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceGroup)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务分组列表
     
     - parameter providerId: (query) 服务商ID (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingGroups(providerId: Int64? = nil, showFlag: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceGroupListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingGroupsWithRequestBuilder(providerId: providerId, showFlag: showFlag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务分组列表
     - GET /ServiceSetting/Groups
     - 根据服务商ID和显示标志获取服务分组列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter providerId: (query) 服务商ID (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - returns: RequestBuilder<ServiceGroupListApiResponse> 
     */
    open class func serviceSettingGroupsWithRequestBuilder(providerId: Int64? = nil, showFlag: Bool? = nil) -> RequestBuilder<ServiceGroupListApiResponse> {
        let localVariablePath = "/ServiceSetting/Groups"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "providerId": (wrappedValue: providerId?.encodeToJSON(), isExplode: true),
            "showFlag": (wrappedValue: showFlag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceGroupListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     服务配置详情
     
     - parameter id: (path) 服务配置ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingItem(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceItemApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingItemWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     服务配置详情
     - GET /ServiceSetting/Items/{id}
     - 根据服务配置ID获取服务配置详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务配置ID 
     - returns: RequestBuilder<ServiceItemApiResponse> 
     */
    open class func serviceSettingItemWithRequestBuilder(id: Int64) -> RequestBuilder<ServiceItemApiResponse> {
        var localVariablePath = "/ServiceSetting/Items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceItemApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除服务配置
     
     - parameter id: (path) 服务配置ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingItemDelete(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingItemDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除服务配置
     - DELETE /ServiceSetting/Items/{id}
     - 根据服务配置ID删除服务配置
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务配置ID 
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingItemDeleteWithRequestBuilder(id: Int64) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/Items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加服务配置
     
     - parameter serviceItem: (body) 服务配置实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingItemPost(serviceItem: ServiceItem? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceSettingItemPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingItemPostWithRequestBuilder(serviceItem: serviceItem).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加服务配置
     - POST /ServiceSetting/Items
     - 添加新的服务配置
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter serviceItem: (body) 服务配置实体 (optional)
     - returns: RequestBuilder<ServiceSettingItemPostResultApiResponse> 
     */
    open class func serviceSettingItemPostWithRequestBuilder(serviceItem: ServiceItem? = nil) -> RequestBuilder<ServiceSettingItemPostResultApiResponse> {
        let localVariablePath = "/ServiceSetting/Items"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceItem)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceSettingItemPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新服务配置
     
     - parameter id: (path) 服务配置ID 
     - parameter serviceItem: (body) 服务配置实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingItemPut(id: Int64, serviceItem: ServiceItem? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingItemPutWithRequestBuilder(id: id, serviceItem: serviceItem).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新服务配置
     - PUT /ServiceSetting/Items/{id}
     - 根据服务配置ID更新服务配置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务配置ID 
     - parameter serviceItem: (body) 服务配置实体 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingItemPutWithRequestBuilder(id: Int64, serviceItem: ServiceItem? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/Items/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceItem)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     服务配置列表
     
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingItems(bizCode: String? = nil, providerCode: String? = nil, groupCode: String? = nil, showFlag: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceItemListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingItemsWithRequestBuilder(bizCode: bizCode, providerCode: providerCode, groupCode: groupCode, showFlag: showFlag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     服务配置列表
     - GET /ServiceSetting/Items
     - 根据业务代码、服务商代码、分组代码和显示标志获取服务配置列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - returns: RequestBuilder<ServiceItemListApiResponse> 
     */
    open class func serviceSettingItemsWithRequestBuilder(bizCode: String? = nil, providerCode: String? = nil, groupCode: String? = nil, showFlag: Bool? = nil) -> RequestBuilder<ServiceItemListApiResponse> {
        let localVariablePath = "/ServiceSetting/Items"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bizCode": (wrappedValue: bizCode?.encodeToJSON(), isExplode: true),
            "providerCode": (wrappedValue: providerCode?.encodeToJSON(), isExplode: true),
            "groupCode": (wrappedValue: groupCode?.encodeToJSON(), isExplode: true),
            "showFlag": (wrappedValue: showFlag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceItemListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     增加配置
     
     - parameter settings: (body) 配置实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingPost(settings: Settings? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceSettingSettingPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingPostWithRequestBuilder(settings: settings).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     增加配置
     - POST /ServiceSetting
     - 添加新的配置
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter settings: (body) 配置实体 (optional)
     - returns: RequestBuilder<ServiceSettingSettingPostResultApiResponse> 
     */
    open class func serviceSettingPostWithRequestBuilder(settings: Settings? = nil) -> RequestBuilder<ServiceSettingSettingPostResultApiResponse> {
        let localVariablePath = "/ServiceSetting"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: settings)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceSettingSettingPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务商详情
     
     - parameter id: (path) 服务商ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingProvider(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceProviderApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingProviderWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务商详情
     - GET /ServiceSetting/Providers/{id}
     - 根据服务商ID获取服务商详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务商ID 
     - returns: RequestBuilder<ServiceProviderApiResponse> 
     */
    open class func serviceSettingProviderWithRequestBuilder(id: Int64) -> RequestBuilder<ServiceProviderApiResponse> {
        var localVariablePath = "/ServiceSetting/Providers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceProviderApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除服务商
     
     - parameter id: (path) 服务商ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingProviderDelete(id: Int64, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingProviderDeleteWithRequestBuilder(id: id).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除服务商
     - DELETE /ServiceSetting/Providers/{id}
     - 根据服务商ID删除服务商
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务商ID 
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingProviderDeleteWithRequestBuilder(id: Int64) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/Providers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加服务商
     
     - parameter serviceProvider: (body) 服务商实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingProviderPost(serviceProvider: ServiceProvider? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceSettingProviderPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingProviderPostWithRequestBuilder(serviceProvider: serviceProvider).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加服务商
     - POST /ServiceSetting/Providers
     - 添加新的服务商
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter serviceProvider: (body) 服务商实体 (optional)
     - returns: RequestBuilder<ServiceSettingProviderPostResultApiResponse> 
     */
    open class func serviceSettingProviderPostWithRequestBuilder(serviceProvider: ServiceProvider? = nil) -> RequestBuilder<ServiceSettingProviderPostResultApiResponse> {
        let localVariablePath = "/ServiceSetting/Providers"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceProvider)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceSettingProviderPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新服务商
     
     - parameter id: (path) 服务商ID 
     - parameter serviceProvider: (body) 服务商实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingProviderPut(id: Int64, serviceProvider: ServiceProvider? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingProviderPutWithRequestBuilder(id: id, serviceProvider: serviceProvider).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新服务商
     - PUT /ServiceSetting/Providers/{id}
     - 根据服务商ID更新服务商信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 服务商ID 
     - parameter serviceProvider: (body) 服务商实体 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingProviderPutWithRequestBuilder(id: Int64, serviceProvider: ServiceProvider? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/Providers/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: serviceProvider)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取服务商列表
     
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingProviders(bizCode: String? = nil, showFlag: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ServiceProviderListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingProvidersWithRequestBuilder(bizCode: bizCode, showFlag: showFlag).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取服务商列表
     - GET /ServiceSetting/Providers
     - 根据业务代码和显示标志获取服务商列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter bizCode: (query) 业务代码 (optional)
     - parameter showFlag: (query) 是否显示 (optional, default to false)
     - returns: RequestBuilder<ServiceProviderListApiResponse> 
     */
    open class func serviceSettingProvidersWithRequestBuilder(bizCode: String? = nil, showFlag: Bool? = nil) -> RequestBuilder<ServiceProviderListApiResponse> {
        let localVariablePath = "/ServiceSetting/Providers"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bizCode": (wrappedValue: bizCode?.encodeToJSON(), isExplode: true),
            "showFlag": (wrappedValue: showFlag?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ServiceProviderListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新配置
     
     - parameter id: (path) 配置ID 
     - parameter settings: (body) 配置实体 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettingPut(id: Int64, settings: Settings? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingPutWithRequestBuilder(id: id, settings: settings).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新配置
     - PUT /ServiceSetting/{id}
     - 根据配置ID更新配置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 配置ID 
     - parameter settings: (body) 配置实体 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func serviceSettingPutWithRequestBuilder(id: Int64, settings: Settings? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/ServiceSetting/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: settings)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取配置列表
     
     - parameter bizCode: (query) 业务代码 
     - parameter bizId: (query) 业务标识 
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter tag: (query) 标签 (optional)
     - parameter code: (query) 配置项代码 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func serviceSettings(bizCode: String, bizId: String, providerCode: String? = nil, groupCode: String? = nil, tag: String? = nil, code: String? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: SettingsListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return serviceSettingsWithRequestBuilder(bizCode: bizCode, bizId: bizId, providerCode: providerCode, groupCode: groupCode, tag: tag, code: code).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取配置列表
     - GET /ServiceSetting
     - 根据业务代码、业务标识、服务商代码、分组代码、标签和配置项代码获取配置列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter bizCode: (query) 业务代码 
     - parameter bizId: (query) 业务标识 
     - parameter providerCode: (query) 服务商代码 (optional)
     - parameter groupCode: (query) 分组代码 (optional)
     - parameter tag: (query) 标签 (optional)
     - parameter code: (query) 配置项代码 (optional)
     - returns: RequestBuilder<SettingsListApiResponse> 
     */
    open class func serviceSettingsWithRequestBuilder(bizCode: String, bizId: String, providerCode: String? = nil, groupCode: String? = nil, tag: String? = nil, code: String? = nil) -> RequestBuilder<SettingsListApiResponse> {
        let localVariablePath = "/ServiceSetting"
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "bizCode": (wrappedValue: bizCode.encodeToJSON(), isExplode: true),
            "bizId": (wrappedValue: bizId.encodeToJSON(), isExplode: true),
            "providerCode": (wrappedValue: providerCode?.encodeToJSON(), isExplode: true),
            "groupCode": (wrappedValue: groupCode?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "code": (wrappedValue: code?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SettingsListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
