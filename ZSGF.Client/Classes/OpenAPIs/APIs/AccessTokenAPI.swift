//
// AccessTokenAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class AccessTokenAPI {

    /**
     删除令牌
     
     - parameter id: (path) 令牌ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accessTokenDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return accessTokenDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除令牌
     - DELETE /AccessToken/{appKey}/{id}
     - 删除用户令牌
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 令牌ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func accessTokenDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AccessToken/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     创建令牌
     
     - parameter appKey: (path)  
     - parameter accessTokenPostRequest: (body) 令牌创建请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accessTokenPost(appKey: String, accessTokenPostRequest: AccessTokenPostRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return accessTokenPostWithRequestBuilder(appKey: appKey, accessTokenPostRequest: accessTokenPostRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     创建令牌
     - POST /AccessToken/{appKey}
     - 创建新的用户令牌
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter accessTokenPostRequest: (body) 令牌创建请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func accessTokenPostWithRequestBuilder(appKey: String, accessTokenPostRequest: AccessTokenPostRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/AccessToken/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accessTokenPostRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新令牌
     
     - parameter id: (path) 令牌ID 
     - parameter appKey: (path)  
     - parameter accessTokenPutRequest: (body) 令牌更新请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accessTokenPut(id: Int64, appKey: String, accessTokenPutRequest: AccessTokenPutRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return accessTokenPutWithRequestBuilder(id: id, appKey: appKey, accessTokenPutRequest: accessTokenPutRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新令牌
     - PUT /AccessToken/{appKey}/{id}
     - 更新现有的用户令牌
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 令牌ID 
     - parameter appKey: (path)  
     - parameter accessTokenPutRequest: (body) 令牌更新请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func accessTokenPutWithRequestBuilder(id: Int64, appKey: String, accessTokenPutRequest: AccessTokenPutRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/AccessToken/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: accessTokenPutRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     令牌列表
     
     - parameter appKey: (path)  
     - parameter userId: (query) 用户ID (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func accessTokens(appKey: String, userId: Int64? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: AccessTokenListResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return accessTokensWithRequestBuilder(appKey: appKey, userId: userId, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     令牌列表
     - GET /AccessToken/{appKey}
     - 获取用户令牌列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter userId: (query) 用户ID (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional)
     - returns: RequestBuilder<AccessTokenListResultApiResponse> 
     */
    open class func accessTokensWithRequestBuilder(appKey: String, userId: Int64? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<AccessTokenListResultApiResponse> {
        var localVariablePath = "/AccessToken/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userId": (wrappedValue: userId?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<AccessTokenListResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
