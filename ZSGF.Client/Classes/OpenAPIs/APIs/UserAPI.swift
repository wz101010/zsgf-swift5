//
// UserAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserAPI {

    /**
     获取用户详情
     
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func user(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取用户详情
     - GET /User/{appKey}/{id}
     - 根据用户ID获取用户详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<UserApiResponse> 
     */
    open class func userWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<UserApiResponse> {
        var localVariablePath = "/User/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     清空用户数据
     
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userClear(appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userClearWithRequestBuilder(appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     清空用户数据
     - DELETE /User/{appKey}/Clear
     - 清空用户数据
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userClearWithRequestBuilder(appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Clear"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     有共同爱好的用户推荐
     
     - parameter appKey: (path)  
     - parameter tag: (query) 兴趣标签 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCommonInterests(appKey: String, tag: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserCommonInterestsResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCommonInterestsWithRequestBuilder(appKey: appKey, tag: tag, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     有共同爱好的用户推荐
     - GET /User/{appKey}/Friends/CommonInterests
     - 推荐有共同爱好的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 兴趣标签 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserCommonInterestsResultApiResponse> 
     */
    open class func userCommonInterestsWithRequestBuilder(appKey: String, tag: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserCommonInterestsResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Friends/CommonInterests"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCommonInterestsResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除用户
     
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除用户
     - DELETE /User/{appKey}/{id}
     - 根据用户ID删除用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     邮箱登录
     
     - parameter appKey: (path)  
     - parameter emailSignInRequest: (body) 登录请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userEmailSignIn(appKey: String, emailSignInRequest: EmailSignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userEmailSignInWithRequestBuilder(appKey: appKey, emailSignInRequest: emailSignInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     邮箱登录
     - POST /User/{appKey}/EmailSignIn
     - 使用邮箱进行登录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter emailSignInRequest: (body) 登录请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userEmailSignInWithRequestBuilder(appKey: String, emailSignInRequest: EmailSignInRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/EmailSignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailSignInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     邮箱注册
     
     - parameter appKey: (path)  
     - parameter emailSignUpRequest: (body) 注册请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userEmailSignUp(appKey: String, emailSignUpRequest: EmailSignUpRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userEmailSignUpWithRequestBuilder(appKey: appKey, emailSignUpRequest: emailSignUpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     邮箱注册
     - POST /User/{appKey}/EmailSignUp
     - 使用邮箱进行注册
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter emailSignUpRequest: (body) 注册请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userEmailSignUpWithRequestBuilder(appKey: String, emailSignUpRequest: EmailSignUpRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/EmailSignUp"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: emailSignUpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     导出用户数据
     
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userExport(appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: URL?, _ error: Error?) -> Void)) -> RequestTask {
        return userExportWithRequestBuilder(appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     导出用户数据
     - GET /User/{appKey}/Export
     - 导出所有用户数据为Excel文件
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - returns: RequestBuilder<URL> 
     */
    open class func userExportWithRequestBuilder(appKey: String) -> RequestBuilder<URL> {
        var localVariablePath = "/User/{appKey}/Export"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<URL>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     关注用户
     
     - parameter userId: (path) 要关注的用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowUser(userId: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowUserWithRequestBuilder(userId: userId, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     关注用户
     - POST /User/{appKey}/Follower/{userId}
     - 关注指定用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter userId: (path) 要关注的用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userFollowUserWithRequestBuilder(userId: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Follower/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新粉丝
     
     - parameter id: (path) 粉丝ID 
     - parameter appKey: (path)  
     - parameter followerPutModel: (body) 更新粉丝的请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowerPut(id: Int64, appKey: String, followerPutModel: FollowerPutModel? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowerPutWithRequestBuilder(id: id, appKey: appKey, followerPutModel: followerPutModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新粉丝
     - PUT /User/{appKey}/Follower/{id}
     - 根据粉丝ID更新粉丝信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 粉丝ID 
     - parameter appKey: (path)  
     - parameter followerPutModel: (body) 更新粉丝的请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userFollowerPutWithRequestBuilder(id: Int64, appKey: String, followerPutModel: FollowerPutModel? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Follower/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: followerPutModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取我的粉丝列表
     
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter status: (query) 状态 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowers(appKey: String, tag: String? = nil, status: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFollowersResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowersWithRequestBuilder(appKey: appKey, tag: tag, status: status, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取我的粉丝列表
     - GET /User/{appKey}/Followers
     - 根据条件获取我的粉丝列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter status: (query) 状态 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserFollowersResultApiResponse> 
     */
    open class func userFollowersWithRequestBuilder(appKey: String, tag: String? = nil, status: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserFollowersResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Followers"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserFollowersResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取我的关注列表
     
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter status: (query) 状态 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFollowing(appKey: String, tag: String? = nil, status: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFollowingResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFollowingWithRequestBuilder(appKey: appKey, tag: tag, status: status, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取我的关注列表
     - GET /User/{appKey}/Following
     - 根据条件获取我的关注列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter status: (query) 状态 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserFollowingResultApiResponse> 
     */
    open class func userFollowingWithRequestBuilder(appKey: String, tag: String? = nil, status: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserFollowingResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Following"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "status": (wrappedValue: status?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserFollowingResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     附近的用户推荐
     
     - parameter x: (query) 纬度 
     - parameter y: (query) 经度 
     - parameter distance: (query) 附近距离，单位：米 
     - parameter appKey: (path)  
     - parameter gender: (query) 性别 (optional)
     - parameter ageS: (query) 年龄段起始 (optional)
     - parameter ageE: (query) 年龄段结束 (optional)
     - parameter tag: (query) 兴趣标签 (optional)
     - parameter type: (query) 分类 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userFriendsNearBy(x: Double, y: Double, distance: Int64, appKey: String, gender: String? = nil, ageS: Int? = nil, ageE: Int? = nil, tag: String? = nil, type: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserFriendsNearByResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userFriendsNearByWithRequestBuilder(x: x, y: y, distance: distance, appKey: appKey, gender: gender, ageS: ageS, ageE: ageE, tag: tag, type: type, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     附近的用户推荐
     - GET /User/{appKey}/Friends/NearBy
     - 推荐附近的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter x: (query) 纬度 
     - parameter y: (query) 经度 
     - parameter distance: (query) 附近距离，单位：米 
     - parameter appKey: (path)  
     - parameter gender: (query) 性别 (optional)
     - parameter ageS: (query) 年龄段起始 (optional)
     - parameter ageE: (query) 年龄段结束 (optional)
     - parameter tag: (query) 兴趣标签 (optional)
     - parameter type: (query) 分类 (optional)
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserFriendsNearByResultApiResponse> 
     */
    open class func userFriendsNearByWithRequestBuilder(x: Double, y: Double, distance: Int64, appKey: String, gender: String? = nil, ageS: Int? = nil, ageE: Int? = nil, tag: String? = nil, type: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserFriendsNearByResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Friends/NearBy"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "x": (wrappedValue: x.encodeToJSON(), isExplode: true),
            "y": (wrappedValue: y.encodeToJSON(), isExplode: true),
            "distance": (wrappedValue: distance.encodeToJSON(), isExplode: true),
            "gender": (wrappedValue: gender?.encodeToJSON(), isExplode: true),
            "ageS": (wrappedValue: ageS?.encodeToJSON(), isExplode: true),
            "ageE": (wrappedValue: ageE?.encodeToJSON(), isExplode: true),
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserFriendsNearByResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     导入用户数据
     
     - parameter appKey: (path)  
     - parameter check: (query) 是否进行检查 (optional)
     - parameter file: (form) 导入的文件 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userImport(appKey: String, check: Bool? = nil, file: URL? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userImportWithRequestBuilder(appKey: appKey, check: check, file: file).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     导入用户数据
     - POST /User/{appKey}/Import
     - 导入用户数据
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter check: (query) 是否进行检查 (optional)
     - parameter file: (form) 导入的文件 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userImportWithRequestBuilder(appKey: String, check: Bool? = nil, file: URL? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Import"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableFormParams: [String: Any?] = [
            "file": file?.encodeToJSON(),
        ]

        let localVariableNonNullParameters = APIHelper.rejectNil(localVariableFormParams)
        let localVariableParameters = APIHelper.convertBoolToString(localVariableNonNullParameters)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "check": (wrappedValue: check?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "multipart/form-data",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取位置详情
     
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocation(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: GeoLocationModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取位置详情
     - GET /User/{appKey}/Location/{id}
     - 根据位置ID获取位置详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<GeoLocationModelApiResponse> 
     */
    open class func userLocationWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<GeoLocationModelApiResponse> {
        var localVariablePath = "/User/{appKey}/Location/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GeoLocationModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除位置
     
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocationDelete(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationDeleteWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除位置
     - DELETE /User/{appKey}/Location/{id}
     - 根据位置ID删除位置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userLocationDeleteWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Location/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加位置
     
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocationPost(appKey: String, geoLocationModel: GeoLocationModel? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLocationPostResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationPostWithRequestBuilder(appKey: appKey, geoLocationModel: geoLocationModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加位置
     - POST /User/{appKey}/Location
     - 添加新的位置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - returns: RequestBuilder<UserLocationPostResultApiResponse> 
     */
    open class func userLocationPostWithRequestBuilder(appKey: String, geoLocationModel: GeoLocationModel? = nil) -> RequestBuilder<UserLocationPostResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Location"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: geoLocationModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLocationPostResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新位置
     
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocationPut(id: Int64, appKey: String, geoLocationModel: GeoLocationModel? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationPutWithRequestBuilder(id: id, appKey: appKey, geoLocationModel: geoLocationModel).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新位置
     - PUT /User/{appKey}/Location/{id}
     - 根据位置ID更新位置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 位置ID 
     - parameter appKey: (path)  
     - parameter geoLocationModel: (body) 位置信息 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userLocationPutWithRequestBuilder(id: Int64, appKey: String, geoLocationModel: GeoLocationModel? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Location/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: geoLocationModel)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取位置列表
     
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter type: (query) 分类 (optional)
     - parameter x: (query) 纬度 (optional)
     - parameter y: (query) 经度 (optional)
     - parameter sphere: (query) 附近距离，单位：米 (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userLocations(appKey: String, tag: String? = nil, type: String? = nil, x: Double? = nil, y: Double? = nil, sphere: Int64? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLocationsResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userLocationsWithRequestBuilder(appKey: appKey, tag: tag, type: type, x: x, y: y, sphere: sphere, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取位置列表
     - GET /User/{appKey}/Locations
     - 根据条件获取位置列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter tag: (query) 标签 (optional)
     - parameter type: (query) 分类 (optional)
     - parameter x: (query) 纬度 (optional)
     - parameter y: (query) 经度 (optional)
     - parameter sphere: (query) 附近距离，单位：米 (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserLocationsResultApiResponse> 
     */
    open class func userLocationsWithRequestBuilder(appKey: String, tag: String? = nil, type: String? = nil, x: Double? = nil, y: Double? = nil, sphere: Int64? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserLocationsResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Locations"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "tag": (wrappedValue: tag?.encodeToJSON(), isExplode: true),
            "type": (wrappedValue: type?.encodeToJSON(), isExplode: true),
            "x": (wrappedValue: x?.encodeToJSON(), isExplode: true),
            "y": (wrappedValue: y?.encodeToJSON(), isExplode: true),
            "sphere": (wrappedValue: sphere?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLocationsResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     有共同粉丝的用户推荐
     
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userMutualFollowers(appKey: String, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserMutualFollowersResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userMutualFollowersWithRequestBuilder(appKey: appKey, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     有共同粉丝的用户推荐
     - GET /User/{appKey}/Friends/MutualFollowers
     - 推荐有共同粉丝的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserMutualFollowersResultApiResponse> 
     */
    open class func userMutualFollowersWithRequestBuilder(appKey: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserMutualFollowersResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Friends/MutualFollowers"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserMutualFollowersResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     有共同关注的用户推荐
     
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userMutualFollowings(appKey: String, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserMutualFollowingsResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userMutualFollowingsWithRequestBuilder(appKey: appKey, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     有共同关注的用户推荐
     - GET /User/{appKey}/Friends/MutualFollowings
     - 推荐有共同关注的用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter skip: (query) 跳过的记录数 (optional, default to 0)
     - parameter take: (query) 获取的记录数 (optional, default to 10)
     - returns: RequestBuilder<UserMutualFollowingsResultApiResponse> 
     */
    open class func userMutualFollowingsWithRequestBuilder(appKey: String, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserMutualFollowingsResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Friends/MutualFollowings"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserMutualFollowingsResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     外部账号 绑定
     
     - parameter appKey: (path)  
     - parameter oAuthAccountBindRequest: (body) 绑定请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userOAuthAccountBind(appKey: String, oAuthAccountBindRequest: OAuthAccountBindRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userOAuthAccountBindWithRequestBuilder(appKey: appKey, oAuthAccountBindRequest: oAuthAccountBindRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部账号 绑定
     - POST /User/{appKey}/OAuthAccountBind
     - 绑定外部账号
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter oAuthAccountBindRequest: (body) 绑定请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userOAuthAccountBindWithRequestBuilder(appKey: String, oAuthAccountBindRequest: OAuthAccountBindRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/OAuthAccountBind"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthAccountBindRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     外部账号 登录
     
     - parameter appKey: (path)  
     - parameter oAuthAccountSignInRequest: (body) 登录请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userOAuthAccountSignIn(appKey: String, oAuthAccountSignInRequest: OAuthAccountSignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userOAuthAccountSignInWithRequestBuilder(appKey: appKey, oAuthAccountSignInRequest: oAuthAccountSignInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部账号 登录
     - POST /User/{appKey}/OAuthAccountSignIn
     - 使用外部账号进行登录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter oAuthAccountSignInRequest: (body) 登录请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userOAuthAccountSignInWithRequestBuilder(appKey: String, oAuthAccountSignInRequest: OAuthAccountSignInRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/OAuthAccountSignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthAccountSignInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     外部账号 绑定列表
     
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userOAuthAccounts(appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserLoginsListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userOAuthAccountsWithRequestBuilder(appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部账号 绑定列表
     - GET /User/{appKey}/OAuthAccounts
     - 获取外部账号绑定列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - returns: RequestBuilder<UserLoginsListApiResponse> 
     */
    open class func userOAuthAccountsWithRequestBuilder(appKey: String) -> RequestBuilder<UserLoginsListApiResponse> {
        var localVariablePath = "/User/{appKey}/OAuthAccounts"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserLoginsListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     外部账号 更新绑定
     
     - parameter id: (path) 绑定ID 
     - parameter appKey: (path)  
     - parameter oAuthAccountPutBindRequest: (body) 更新请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userOAuthAccountsPutBind(id: Int64, appKey: String, oAuthAccountPutBindRequest: OAuthAccountPutBindRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userOAuthAccountsPutBindWithRequestBuilder(id: id, appKey: appKey, oAuthAccountPutBindRequest: oAuthAccountPutBindRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部账号 更新绑定
     - PUT /User/{appKey}/OAuthAccounts/{id}
     - 更新外部账号绑定信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 绑定ID 
     - parameter appKey: (path)  
     - parameter oAuthAccountPutBindRequest: (body) 更新请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userOAuthAccountsPutBindWithRequestBuilder(id: Int64, appKey: String, oAuthAccountPutBindRequest: OAuthAccountPutBindRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/OAuthAccounts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: oAuthAccountPutBindRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     外部账号 删除绑定
     
     - parameter id: (path) 绑定ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userOAuthAccountsUnBind(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userOAuthAccountsUnBindWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     外部账号 删除绑定
     - DELETE /User/{appKey}/OAuthAccounts/{id}
     - 删除外部账号绑定
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 绑定ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userOAuthAccountsUnBindWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/OAuthAccounts/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     手机登录
     
     - parameter appKey: (path)  
     - parameter phoneSignInRequest: (body) 登录请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userPhoneSignIn(appKey: String, phoneSignInRequest: PhoneSignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userPhoneSignInWithRequestBuilder(appKey: appKey, phoneSignInRequest: phoneSignInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     手机登录
     - POST /User/{appKey}/PhoneSignIn
     - 使用手机号码进行登录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter phoneSignInRequest: (body) 登录请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userPhoneSignInWithRequestBuilder(appKey: String, phoneSignInRequest: PhoneSignInRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/PhoneSignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: phoneSignInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     手机注册
     
     - parameter appKey: (path)  
     - parameter phoneSignUpRequest: (body) 注册请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userPhoneSignUp(appKey: String, phoneSignUpRequest: PhoneSignUpRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userPhoneSignUpWithRequestBuilder(appKey: appKey, phoneSignUpRequest: phoneSignUpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     手机注册
     - POST /User/{appKey}/PhoneSignUp
     - 使用手机号码进行注册
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter phoneSignUpRequest: (body) 注册请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userPhoneSignUpWithRequestBuilder(appKey: String, phoneSignUpRequest: PhoneSignUpRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/PhoneSignUp"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: phoneSignUpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取个人资料
     
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userProfile(appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserProfileResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userProfileWithRequestBuilder(appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取个人资料
     - GET /User/{appKey}/Profile
     - 获取当前用户的个人资料
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - returns: RequestBuilder<UserProfileResultApiResponse> 
     */
    open class func userProfileWithRequestBuilder(appKey: String) -> RequestBuilder<UserProfileResultApiResponse> {
        var localVariablePath = "/User/{appKey}/Profile"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserProfileResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新用户信息
     
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - parameter user: (body) 用户信息 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userPut(id: Int64, appKey: String, user: User? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userPutWithRequestBuilder(id: id, appKey: appKey, user: user).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新用户信息
     - PUT /User/{appKey}/{id}
     - 根据用户ID更新用户信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - parameter user: (body) 用户信息 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userPutWithRequestBuilder(id: Int64, appKey: String, user: User? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: user)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     微信小程序 - 预登陆
     
     - parameter appKey: (path)  
     - parameter qRCodePreSignInRequest: (body) 预登陆请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userQRCodePreSignIn(appKey: String, qRCodePreSignInRequest: QRCodePreSignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: Int64ApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userQRCodePreSignInWithRequestBuilder(appKey: appKey, qRCodePreSignInRequest: qRCodePreSignInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     微信小程序 - 预登陆
     - POST /User/{appKey}/QRCodePreSignIn
     - 使用微信小程序二维码进行预登陆
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter qRCodePreSignInRequest: (body) 预登陆请求参数 (optional)
     - returns: RequestBuilder<Int64ApiResponse> 
     */
    open class func userQRCodePreSignInWithRequestBuilder(appKey: String, qRCodePreSignInRequest: QRCodePreSignInRequest? = nil) -> RequestBuilder<Int64ApiResponse> {
        var localVariablePath = "/User/{appKey}/QRCodePreSignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: qRCodePreSignInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Int64ApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     微信小程序 - 扫码
     
     - parameter appKey: (path)  
     - parameter qRCodeScanRequest: (body) 扫码请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userQRCodeScan(appKey: String, qRCodeScanRequest: QRCodeScanRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserQRCodeScanResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userQRCodeScanWithRequestBuilder(appKey: appKey, qRCodeScanRequest: qRCodeScanRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     微信小程序 - 扫码
     - POST /User/{appKey}/QRCodeScan
     - 使用微信小程序二维码进行扫码
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter qRCodeScanRequest: (body) 扫码请求参数 (optional)
     - returns: RequestBuilder<UserQRCodeScanResultApiResponse> 
     */
    open class func userQRCodeScanWithRequestBuilder(appKey: String, qRCodeScanRequest: QRCodeScanRequest? = nil) -> RequestBuilder<UserQRCodeScanResultApiResponse> {
        var localVariablePath = "/User/{appKey}/QRCodeScan"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: qRCodeScanRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserQRCodeScanResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     微信小程序 - 网页登录
     
     - parameter appKey: (path)  
     - parameter qRCodeSignInRequest: (body) 登录请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userQRCodeSignIn(appKey: String, qRCodeSignInRequest: QRCodeSignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userQRCodeSignInWithRequestBuilder(appKey: appKey, qRCodeSignInRequest: qRCodeSignInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     微信小程序 - 网页登录
     - POST /User/{appKey}/QRCodeSignIn
     - 使用微信小程序二维码进行网页登录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter qRCodeSignInRequest: (body) 登录请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userQRCodeSignInWithRequestBuilder(appKey: String, qRCodeSignInRequest: QRCodeSignInRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/QRCodeSignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: qRCodeSignInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     微信小程序 - 注册
     
     - parameter appKey: (path)  
     - parameter qRCodeSignUpRequest: (body) 注册请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userQRCodeSignUp(appKey: String, qRCodeSignUpRequest: QRCodeSignUpRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userQRCodeSignUpWithRequestBuilder(appKey: appKey, qRCodeSignUpRequest: qRCodeSignUpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     微信小程序 - 注册
     - POST /User/{appKey}/QRCodeSignUp
     - 使用微信小程序二维码进行注册
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter qRCodeSignUpRequest: (body) 注册请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userQRCodeSignUpWithRequestBuilder(appKey: String, qRCodeSignUpRequest: QRCodeSignUpRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/QRCodeSignUp"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: qRCodeSignUpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     重置密码
     
     - parameter appKey: (path)  
     - parameter appUserResetPwdRequest: (body) 重置密码的请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userResetPwd(appKey: String, appUserResetPwdRequest: AppUserResetPwdRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userResetPwdWithRequestBuilder(appKey: appKey, appUserResetPwdRequest: appUserResetPwdRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     重置密码
     - POST /User/{appKey}/ResetPwd
     - 通过手机号或邮箱重置密码
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter appUserResetPwdRequest: (body) 重置密码的请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userResetPwdWithRequestBuilder(appKey: String, appUserResetPwdRequest: AppUserResetPwdRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/ResetPwd"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: appUserResetPwdRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     发送邮箱验证码
     
     - parameter appKey: (path)  
     - parameter sendEmailCodeRequest: (body) 发送邮箱验证码的请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSendEmailCode(appKey: String, sendEmailCodeRequest: SendEmailCodeRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userSendEmailCodeWithRequestBuilder(appKey: appKey, sendEmailCodeRequest: sendEmailCodeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     发送邮箱验证码
     - POST /User/{appKey}/SendEmailCode
     - 发送邮箱验证码用于注册或找回密码
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter sendEmailCodeRequest: (body) 发送邮箱验证码的请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userSendEmailCodeWithRequestBuilder(appKey: String, sendEmailCodeRequest: SendEmailCodeRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/SendEmailCode"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendEmailCodeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     发送手机验证码
     
     - parameter appKey: (path)  
     - parameter sendSMSCodeRequest: (body) 发送手机验证码的请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSendSMSCode(appKey: String, sendSMSCodeRequest: SendSMSCodeRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userSendSMSCodeWithRequestBuilder(appKey: appKey, sendSMSCodeRequest: sendSMSCodeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     发送手机验证码
     - POST /User/{appKey}/SendSMSCode
     - 发送手机验证码用于注册或找回密码
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter sendSMSCodeRequest: (body) 发送手机验证码的请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userSendSMSCodeWithRequestBuilder(appKey: String, sendSMSCodeRequest: SendSMSCodeRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/SendSMSCode"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: sendSMSCodeRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     账号密码 登录
     
     - parameter appKey: (path)  
     - parameter signInRequest: (body) 登录请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSignIn(appKey: String, signInRequest: SignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userSignInWithRequestBuilder(appKey: appKey, signInRequest: signInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     账号密码 登录
     - POST /User/{appKey}/SignIn
     - 使用账号密码进行登录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter signInRequest: (body) 登录请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userSignInWithRequestBuilder(appKey: String, signInRequest: SignInRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/SignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     账号密码 注册
     
     - parameter appKey: (path)  
     - parameter signUpRequest: (body) 注册请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userSignUp(appKey: String, signUpRequest: SignUpRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userSignUpWithRequestBuilder(appKey: appKey, signUpRequest: signUpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     账号密码 注册
     - POST /User/{appKey}/SignUp
     - 使用账号密码进行注册
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter signUpRequest: (body) 注册请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userSignUpWithRequestBuilder(appKey: String, signUpRequest: SignUpRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/SignUp"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: signUpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     双因素验证
     
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userTwoFactorAuth(appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: SetupCodeApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userTwoFactorAuthWithRequestBuilder(appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     双因素验证
     - GET /User/{appKey}/TwoFactorAuth
     - 获取双因素验证的设置信息
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - returns: RequestBuilder<SetupCodeApiResponse> 
     */
    open class func userTwoFactorAuthWithRequestBuilder(appKey: String) -> RequestBuilder<SetupCodeApiResponse> {
        var localVariablePath = "/User/{appKey}/TwoFactorAuth"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SetupCodeApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     取消关注
     
     - parameter userId: (path) 要取消关注的用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUnfollowUser(userId: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUnfollowUserWithRequestBuilder(userId: userId, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     取消关注
     - DELETE /User/{appKey}/Follower/{userId}
     - 取消关注指定用户
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter userId: (path) 要取消关注的用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userUnfollowUserWithRequestBuilder(userId: Int64, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Follower/{userId}"
        let userIdPreEscape = "\(APIHelper.mapValueToPathItem(userId))"
        let userIdPostEscape = userIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{userId}", with: userIdPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     UnionID登录
     
     - parameter appKey: (path)  
     - parameter unionIDSignInRequest: (body) 登录请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUnionIDSignIn(appKey: String, unionIDSignInRequest: UnionIDSignInRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUnionIDSignInWithRequestBuilder(appKey: appKey, unionIDSignInRequest: unionIDSignInRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     UnionID登录
     - POST /User/{appKey}/UnionIDSignIn
     - 使用UnionID进行登录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter unionIDSignInRequest: (body) 登录请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userUnionIDSignInWithRequestBuilder(appKey: String, unionIDSignInRequest: UnionIDSignInRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/UnionIDSignIn"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unionIDSignInRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     UnionID注册
     
     - parameter appKey: (path)  
     - parameter unionIDSignUpRequest: (body) 注册请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUnionIDSignUp(appKey: String, unionIDSignUpRequest: UnionIDSignUpRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: TokenModelApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUnionIDSignUpWithRequestBuilder(appKey: appKey, unionIDSignUpRequest: unionIDSignUpRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     UnionID注册
     - POST /User/{appKey}/UnionIDSignUp
     - 使用UnionID进行注册
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter unionIDSignUpRequest: (body) 注册请求参数 (optional)
     - returns: RequestBuilder<TokenModelApiResponse> 
     */
    open class func userUnionIDSignUpWithRequestBuilder(appKey: String, unionIDSignUpRequest: UnionIDSignUpRequest? = nil) -> RequestBuilder<TokenModelApiResponse> {
        var localVariablePath = "/User/{appKey}/UnionIDSignUp"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: unionIDSignUpRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<TokenModelApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新个人资料
     
     - parameter appKey: (path)  
     - parameter updateProfileRequest: (body) 更新个人资料的请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userUpdateProfile(appKey: String, updateProfileRequest: UpdateProfileRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userUpdateProfileWithRequestBuilder(appKey: appKey, updateProfileRequest: updateProfileRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新个人资料
     - PUT /User/{appKey}/Profile
     - 更新当前用户的个人资料
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter updateProfileRequest: (body) 更新个人资料的请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userUpdateProfileWithRequestBuilder(appKey: String, updateProfileRequest: UpdateProfileRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/User/{appKey}/Profile"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: updateProfileRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     获取用户列表
     
     - parameter appKey: (path)  
     - parameter userName: (query) 用户名 (optional)
     - parameter email: (query) 邮箱 (optional)
     - parameter phone: (query) 电话 (optional)
     - parameter platform: (query) 平台 (optional)
     - parameter unionId: (query) 联合ID (optional)
     - parameter role: (query) 角色 (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func users(appKey: String, userName: String? = nil, email: String? = nil, phone: String? = nil, platform: String? = nil, unionId: String? = nil, role: String? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserListResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return usersWithRequestBuilder(appKey: appKey, userName: userName, email: email, phone: phone, platform: platform, unionId: unionId, role: role, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取用户列表
     - GET /User/{appKey}
     - 根据条件获取用户列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter userName: (query) 用户名 (optional)
     - parameter email: (query) 邮箱 (optional)
     - parameter phone: (query) 电话 (optional)
     - parameter platform: (query) 平台 (optional)
     - parameter unionId: (query) 联合ID (optional)
     - parameter role: (query) 角色 (optional)
     - parameter skip: (query) 跳过的记录数 (optional)
     - parameter take: (query) 获取的记录数 (optional)
     - returns: RequestBuilder<UserListResultApiResponse> 
     */
    open class func usersWithRequestBuilder(appKey: String, userName: String? = nil, email: String? = nil, phone: String? = nil, platform: String? = nil, unionId: String? = nil, role: String? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserListResultApiResponse> {
        var localVariablePath = "/User/{appKey}"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "userName": (wrappedValue: userName?.encodeToJSON(), isExplode: true),
            "email": (wrappedValue: email?.encodeToJSON(), isExplode: true),
            "phone": (wrappedValue: phone?.encodeToJSON(), isExplode: true),
            "platform": (wrappedValue: platform?.encodeToJSON(), isExplode: true),
            "unionId": (wrappedValue: unionId?.encodeToJSON(), isExplode: true),
            "role": (wrappedValue: role?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserListResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
