//
// StorageAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class StorageAPI {

    /**
     聚合查询
     
     - parameter table: (path) 表名称 
     - parameter appKey: (path)  
     - parameter pipeline: (query) 构建聚合查询 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storageAggregate(table: String, appKey: String, pipeline: String? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ObjectListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storageAggregateWithRequestBuilder(table: table, appKey: appKey, pipeline: pipeline).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     聚合查询
     - GET /Storage/{appKey}/{table}/Aggregate
     - 根据聚合管道查询指定表中的数据
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter table: (path) 表名称 
     - parameter appKey: (path)  
     - parameter pipeline: (query) 构建聚合查询 (optional)
     - returns: RequestBuilder<ObjectListApiResponse> 
     */
    open class func storageAggregateWithRequestBuilder(table: String, appKey: String, pipeline: String? = nil) -> RequestBuilder<ObjectListApiResponse> {
        var localVariablePath = "/Storage/{appKey}/{table}/Aggregate"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "pipeline": (wrappedValue: pipeline?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ObjectListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     删除数据
     
     - parameter table: (path) 表名称 
     - parameter id: (path) 数据ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storageDelete(table: String, id: String, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storageDeleteWithRequestBuilder(table: table, id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     删除数据
     - DELETE /Storage/{appKey}/{table}/{id}
     - 删除指定表中指定ID的数据
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter table: (path) 表名称 
     - parameter id: (path) 数据ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func storageDeleteWithRequestBuilder(table: String, id: String, appKey: String) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/Storage/{appKey}/{table}/{id}"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     数据详情
     
     - parameter table: (path) 表名称 
     - parameter id: (path) 数据ID 
     - parameter appKey: (path)  
     - parameter project: (query) json格式 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storageDetail(table: String, id: String, appKey: String, project: String? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: ObjectApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storageDetailWithRequestBuilder(table: table, id: id, appKey: appKey, project: project).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     数据详情
     - GET /Storage/{appKey}/{table}/{id}
     - 获取指定表中指定ID的数据详情
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter table: (path) 表名称 
     - parameter id: (path) 数据ID 
     - parameter appKey: (path)  
     - parameter project: (query) json格式 (optional)
     - returns: RequestBuilder<ObjectApiResponse> 
     */
    open class func storageDetailWithRequestBuilder(table: String, id: String, appKey: String, project: String? = nil) -> RequestBuilder<ObjectApiResponse> {
        var localVariablePath = "/Storage/{appKey}/{table}/{id}"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "project": (wrappedValue: project?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ObjectApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     查询数据
     
     - parameter table: (path) 表名称 
     - parameter appKey: (path)  
     - parameter filter: (query) 过滤，json格式 (optional)
     - parameter project: (query) 字段映射，json格式 (optional)
     - parameter sort: (query) 排序，json格式 (optional)
     - parameter startTime: (query) 开始时间 (optional)
     - parameter endTime: (query) 结束时间 (optional)
     - parameter explain: (query) 查看执行计划 (optional, default to false)
     - parameter take: (query) 默认为10 (optional, default to 10)
     - parameter skip: (query) 默认为0 (optional, default to 0)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storageList(table: String, appKey: String, filter: String? = nil, project: String? = nil, sort: String? = nil, startTime: Date? = nil, endTime: Date? = nil, explain: Bool? = nil, take: Int? = nil, skip: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: StorageListResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storageListWithRequestBuilder(table: table, appKey: appKey, filter: filter, project: project, sort: sort, startTime: startTime, endTime: endTime, explain: explain, take: take, skip: skip).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     查询数据
     - GET /Storage/{appKey}/{table}
     - 根据条件查询指定表中的数据
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter table: (path) 表名称 
     - parameter appKey: (path)  
     - parameter filter: (query) 过滤，json格式 (optional)
     - parameter project: (query) 字段映射，json格式 (optional)
     - parameter sort: (query) 排序，json格式 (optional)
     - parameter startTime: (query) 开始时间 (optional)
     - parameter endTime: (query) 结束时间 (optional)
     - parameter explain: (query) 查看执行计划 (optional, default to false)
     - parameter take: (query) 默认为10 (optional, default to 10)
     - parameter skip: (query) 默认为0 (optional, default to 0)
     - returns: RequestBuilder<StorageListResultApiResponse> 
     */
    open class func storageListWithRequestBuilder(table: String, appKey: String, filter: String? = nil, project: String? = nil, sort: String? = nil, startTime: Date? = nil, endTime: Date? = nil, explain: Bool? = nil, take: Int? = nil, skip: Int? = nil) -> RequestBuilder<StorageListResultApiResponse> {
        var localVariablePath = "/Storage/{appKey}/{table}"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "filter": (wrappedValue: filter?.encodeToJSON(), isExplode: true),
            "project": (wrappedValue: project?.encodeToJSON(), isExplode: true),
            "sort": (wrappedValue: sort?.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
            "explain": (wrappedValue: explain?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StorageListResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     添加数据
     
     - parameter table: (path) 表名称（小写字母加数字,1-50位） 
     - parameter appKey: (path)  
     - parameter requestBody: (body) json对象 / json数组 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storagePost(table: String, appKey: String, requestBody: [AnyCodable], apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: StringApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storagePostWithRequestBuilder(table: table, appKey: appKey, requestBody: requestBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     添加数据
     - POST /Storage/{appKey}/{table}
     - 向指定表中添加数据，可以是单个json对象或json数组
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter table: (path) 表名称（小写字母加数字,1-50位） 
     - parameter appKey: (path)  
     - parameter requestBody: (body) json对象 / json数组 
     - returns: RequestBuilder<StringApiResponse> 
     */
    open class func storagePostWithRequestBuilder(table: String, appKey: String, requestBody: [AnyCodable]) -> RequestBuilder<StringApiResponse> {
        var localVariablePath = "/Storage/{appKey}/{table}"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<StringApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     更新数据
     
     - parameter table: (path) 表名称 
     - parameter id: (path) 数据ID 
     - parameter appKey: (path)  
     - parameter requestBody: (body) json格式 
     - parameter replace: (query) 是否为全量更新，默认为false (optional, default to false)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func storagePut(table: String, id: String, appKey: String, requestBody: [AnyCodable], replace: Bool? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return storagePutWithRequestBuilder(table: table, id: id, appKey: appKey, requestBody: requestBody, replace: replace).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     更新数据
     - PUT /Storage/{appKey}/{table}/{id}
     - 更新指定表中指定ID的数据，可以选择全量更新或部分更新
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter table: (path) 表名称 
     - parameter id: (path) 数据ID 
     - parameter appKey: (path)  
     - parameter requestBody: (body) json格式 
     - parameter replace: (query) 是否为全量更新，默认为false (optional, default to false)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func storagePutWithRequestBuilder(table: String, id: String, appKey: String, requestBody: [AnyCodable], replace: Bool? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/Storage/{appKey}/{table}/{id}"
        let tablePreEscape = "\(APIHelper.mapValueToPathItem(table))"
        let tablePostEscape = tablePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{table}", with: tablePostEscape, options: .literal, range: nil)
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: requestBody)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "replace": (wrappedValue: replace?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
