//
// UserCurrencyAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class UserCurrencyAPI {

    /**
     获取用户资产
     
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCurrencies(id: Int64, appKey: String, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserCurrencyListApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCurrenciesWithRequestBuilder(id: id, appKey: appKey).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     获取用户资产
     - GET /UserCurrency/{appKey}/{id}
     - 根据用户ID获取用户的资产列表
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter id: (path) 用户ID 
     - parameter appKey: (path)  
     - returns: RequestBuilder<UserCurrencyListApiResponse> 
     */
    open class func userCurrenciesWithRequestBuilder(id: Int64, appKey: String) -> RequestBuilder<UserCurrencyListApiResponse> {
        var localVariablePath = "/UserCurrency/{appKey}/{id}"
        let idPreEscape = "\(APIHelper.mapValueToPathItem(id))"
        let idPostEscape = idPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{id}", with: idPostEscape, options: .literal, range: nil)
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCurrencyListApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     消费虚拟币
     
     - parameter nonce: (query) 随机数 
     - parameter timestamp: (query) 时间戳（允许与服务器时间误差在1分钟内） 
     - parameter signature: (query) 签名 
     - parameter appKey: (path)  
     - parameter currencyConsumeRequest: (body) 消费请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCurrencyConsume(nonce: String, timestamp: Int64, signature: String, appKey: String, currencyConsumeRequest: CurrencyConsumeRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCurrencyConsumeWithRequestBuilder(nonce: nonce, timestamp: timestamp, signature: signature, appKey: appKey, currencyConsumeRequest: currencyConsumeRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     消费虚拟币
     - POST /UserCurrency/{appKey}/CurrencyConsume
     - 根据提供的参数进行虚拟币消费
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter nonce: (query) 随机数 
     - parameter timestamp: (query) 时间戳（允许与服务器时间误差在1分钟内） 
     - parameter signature: (query) 签名 
     - parameter appKey: (path)  
     - parameter currencyConsumeRequest: (body) 消费请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userCurrencyConsumeWithRequestBuilder(nonce: String, timestamp: Int64, signature: String, appKey: String, currencyConsumeRequest: CurrencyConsumeRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserCurrency/{appKey}/CurrencyConsume"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: currencyConsumeRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "nonce": (wrappedValue: nonce.encodeToJSON(), isExplode: true),
            "timestamp": (wrappedValue: timestamp.encodeToJSON(), isExplode: true),
            "signature": (wrappedValue: signature.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     兑换虚拟币
     
     - parameter nonce: (query) 随机数 
     - parameter timestamp: (query) 时间戳（允许与服务器时间误差在1分钟内） 
     - parameter signature: (query) 签名 
     - parameter appKey: (path)  
     - parameter exchangeCurrencyRequest: (body) 兑换请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCurrencyExchange(nonce: String, timestamp: Int64, signature: String, appKey: String, exchangeCurrencyRequest: ExchangeCurrencyRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCurrencyExchangeWithRequestBuilder(nonce: nonce, timestamp: timestamp, signature: signature, appKey: appKey, exchangeCurrencyRequest: exchangeCurrencyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     兑换虚拟币
     - POST /UserCurrency/{appKey}/CurrencyExchange
     - 根据提供的参数进行虚拟币兑换
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter nonce: (query) 随机数 
     - parameter timestamp: (query) 时间戳（允许与服务器时间误差在1分钟内） 
     - parameter signature: (query) 签名 
     - parameter appKey: (path)  
     - parameter exchangeCurrencyRequest: (body) 兑换请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userCurrencyExchangeWithRequestBuilder(nonce: String, timestamp: Int64, signature: String, appKey: String, exchangeCurrencyRequest: ExchangeCurrencyRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserCurrency/{appKey}/CurrencyExchange"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: exchangeCurrencyRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "nonce": (wrappedValue: nonce.encodeToJSON(), isExplode: true),
            "timestamp": (wrappedValue: timestamp.encodeToJSON(), isExplode: true),
            "signature": (wrappedValue: signature.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     充值虚拟币
     
     - parameter nonce: (query) 随机数 
     - parameter timestamp: (query) 时间戳（允许与服务器时间误差在1分钟内） 
     - parameter signature: (query) 签名 
     - parameter appKey: (path)  
     - parameter rechargePointRequest: (body) 充值请求参数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCurrencyRecharge(nonce: String, timestamp: Int64, signature: String, appKey: String, rechargePointRequest: RechargePointRequest? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: BooleanApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCurrencyRechargeWithRequestBuilder(nonce: nonce, timestamp: timestamp, signature: signature, appKey: appKey, rechargePointRequest: rechargePointRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     充值虚拟币
     - POST /UserCurrency/{appKey}/CurrencyRecharge
     - 根据提供的参数进行虚拟币充值
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter nonce: (query) 随机数 
     - parameter timestamp: (query) 时间戳（允许与服务器时间误差在1分钟内） 
     - parameter signature: (query) 签名 
     - parameter appKey: (path)  
     - parameter rechargePointRequest: (body) 充值请求参数 (optional)
     - returns: RequestBuilder<BooleanApiResponse> 
     */
    open class func userCurrencyRechargeWithRequestBuilder(nonce: String, timestamp: Int64, signature: String, appKey: String, rechargePointRequest: RechargePointRequest? = nil) -> RequestBuilder<BooleanApiResponse> {
        var localVariablePath = "/UserCurrency/{appKey}/CurrencyRecharge"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: rechargePointRequest)

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "nonce": (wrappedValue: nonce.encodeToJSON(), isExplode: true),
            "timestamp": (wrappedValue: timestamp.encodeToJSON(), isExplode: true),
            "signature": (wrappedValue: signature.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            "Content-Type": "application/json-patch+json",
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<BooleanApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     虚拟币交易记录
     
     - parameter appKey: (path)  
     - parameter transType: (query) 交易类型 (optional)
     - parameter curCode: (query) 货币代码 (optional)
     - parameter startTime: (query) 开始时间 (optional)
     - parameter endTime: (query) 结束时间 (optional)
     - parameter skip: (query) 跳过的条数 (optional)
     - parameter take: (query) 拉取的条数 (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func userCurrencyTransactions(appKey: String, transType: String? = nil, curCode: String? = nil, startTime: Date? = nil, endTime: Date? = nil, skip: Int? = nil, take: Int? = nil, apiResponseQueue: DispatchQueue = ZSGF.ClientAPI.apiResponseQueue, completion: @escaping ((_ data: UserCurrencyCurrencyTransResultApiResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return userCurrencyTransactionsWithRequestBuilder(appKey: appKey, transType: transType, curCode: curCode, startTime: startTime, endTime: endTime, skip: skip, take: take).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     虚拟币交易记录
     - GET /UserCurrency/{appKey}/CurrencyTransactions
     - 根据提供的参数获取虚拟币交易记录
     - Bearer Token:
       - type: http
       - name: Bearer
     - parameter appKey: (path)  
     - parameter transType: (query) 交易类型 (optional)
     - parameter curCode: (query) 货币代码 (optional)
     - parameter startTime: (query) 开始时间 (optional)
     - parameter endTime: (query) 结束时间 (optional)
     - parameter skip: (query) 跳过的条数 (optional)
     - parameter take: (query) 拉取的条数 (optional)
     - returns: RequestBuilder<UserCurrencyCurrencyTransResultApiResponse> 
     */
    open class func userCurrencyTransactionsWithRequestBuilder(appKey: String, transType: String? = nil, curCode: String? = nil, startTime: Date? = nil, endTime: Date? = nil, skip: Int? = nil, take: Int? = nil) -> RequestBuilder<UserCurrencyCurrencyTransResultApiResponse> {
        var localVariablePath = "/UserCurrency/{appKey}/CurrencyTransactions"
        let appKeyPreEscape = "\(APIHelper.mapValueToPathItem(appKey))"
        let appKeyPostEscape = appKeyPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{appKey}", with: appKeyPostEscape, options: .literal, range: nil)
        let localVariableURLString = ZSGF.ClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "transType": (wrappedValue: transType?.encodeToJSON(), isExplode: true),
            "curCode": (wrappedValue: curCode?.encodeToJSON(), isExplode: true),
            "startTime": (wrappedValue: startTime?.encodeToJSON(), isExplode: true),
            "endTime": (wrappedValue: endTime?.encodeToJSON(), isExplode: true),
            "skip": (wrappedValue: skip?.encodeToJSON(), isExplode: true),
            "take": (wrappedValue: take?.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<UserCurrencyCurrencyTransResultApiResponse>.Type = ZSGF.ClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
