//
// UserSetting.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 用户配置实体，用于存储用户的个性化设置。 */
public struct UserSetting: Codable, JSONEncodable, Hashable {

    public static let providerCodeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let groupCodeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let codeRule = StringRule(minLength: 1, maxLength: 100, pattern: nil)
    public static let valueRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let descriptionRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 用户的唯一标识符。 */
    public var id: Int64?
    /** 关联的用户ID，表示该配置属于哪个用户。 */
    public var userID: Int64
    /** 提供商的唯一代码，用于标识服务提供者。 */
    public var providerCode: String?
    /** 组的唯一代码，用于分类设置项。 */
    public var groupCode: String?
    /** 设置项的唯一代码或键名，用于标识具体的配置项。 */
    public var code: String
    /** 设置项的具体值或选项。 */
    public var value: String
    /** 用于对设置项进行分类或标记的标签。 */
    public var tags: String?
    /** 设置项的详细描述，说明其作用或用途。 */
    public var description: String?
    /** 指示该设置项是否在前端界面中可用。 */
    public var frontendUsable: Bool?
    /** 设置项的创建时间。 */
    public var createDate: Date?
    /** 设置项的最后更新时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, userID: Int64, providerCode: String? = nil, groupCode: String? = nil, code: String, value: String, tags: String? = nil, description: String? = nil, frontendUsable: Bool? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.userID = userID
        self.providerCode = providerCode
        self.groupCode = groupCode
        self.code = code
        self.value = value
        self.tags = tags
        self.description = description
        self.frontendUsable = frontendUsable
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userID
        case providerCode
        case groupCode
        case code
        case value
        case tags
        case description
        case frontendUsable
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(userID, forKey: .userID)
        try container.encodeIfPresent(providerCode, forKey: .providerCode)
        try container.encodeIfPresent(groupCode, forKey: .groupCode)
        try container.encode(code, forKey: .code)
        try container.encode(value, forKey: .value)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(frontendUsable, forKey: .frontendUsable)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserSetting: Identifiable {}
