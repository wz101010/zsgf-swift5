//
// Settings.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 公共配置存储实体，用于集中管理系统的配置项。 */
public struct Settings: Codable, JSONEncodable, Hashable {

    public static let bizCodeRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let bizIdentityRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let providerCodeRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let groupCodeRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let codeRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let descriptionRule = StringRule(minLength: nil, maxLength: 1024, pattern: nil)
    /** 配置项的唯一标识符。 */
    public var id: Int64?
    /** 配置项所属的业务代码，用于分类管理。 */
    public var bizCode: String?
    /** 配置项所属的业务标识，用于唯一标识业务。 */
    public var bizIdentity: String?
    /** 配置项的提供者代码，用于标识配置来源。 */
    public var providerCode: String?
    /** 配置项的分组代码，用于组织和管理相关配置。 */
    public var groupCode: String?
    /** 配置项的唯一代码，用于标识具体的配置项。 */
    public var code: String?
    /** 配置项的具体值，存储配置内容。 */
    public var value: String?
    /** 用于分类或标记配置项的标签。 */
    public var tags: String?
    /** 配置项的详细描述，说明其用途和作用。 */
    public var description: String?
    /** 指示该配置项是否可供前端使用。 */
    public var frontendUsable: Bool?
    /** 配置项的创建日期，默认为当前时间。 */
    public var createDate: Date?
    /** 配置项的最后更新日期，默认为当前时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, bizCode: String? = nil, bizIdentity: String? = nil, providerCode: String? = nil, groupCode: String? = nil, code: String? = nil, value: String? = nil, tags: String? = nil, description: String? = nil, frontendUsable: Bool? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.bizCode = bizCode
        self.bizIdentity = bizIdentity
        self.providerCode = providerCode
        self.groupCode = groupCode
        self.code = code
        self.value = value
        self.tags = tags
        self.description = description
        self.frontendUsable = frontendUsable
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case bizCode
        case bizIdentity
        case providerCode
        case groupCode
        case code
        case value
        case tags
        case description
        case frontendUsable
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(bizCode, forKey: .bizCode)
        try container.encodeIfPresent(bizIdentity, forKey: .bizIdentity)
        try container.encodeIfPresent(providerCode, forKey: .providerCode)
        try container.encodeIfPresent(groupCode, forKey: .groupCode)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(value, forKey: .value)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(frontendUsable, forKey: .frontendUsable)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Settings: Identifiable {}
