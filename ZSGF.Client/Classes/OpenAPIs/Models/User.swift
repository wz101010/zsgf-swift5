//
// User.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 用户 */
public struct User: Codable, JSONEncodable, Hashable {

    public static let platformRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let unionIDRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let nickNameRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let avatarRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let userNameRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let pwdRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let emailRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let phoneRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let biographyRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public static let genderRule = StringRule(minLength: nil, maxLength: 15, pattern: nil)
    public static let occupationRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let educationRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let contactRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let languagesRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let socialLinksRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let relationshipStatusRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let companyRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let industryRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let companyPositionRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let privateSettingsRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    /** 用户唯一标识 */
    public var id: Int64?
    /** 用户所在平台 */
    public var platform: String?
    /** 用户所在平台的唯一标识 */
    public var unionID: String?
    /** 昵称 */
    public var nickName: String?
    /** 头像 */
    public var avatar: String?
    /** 其他数据 */
    public var data: String?
    /** 用户名 */
    public var userName: String?
    /** 用户密码 */
    public var pwd: String?
    /** 邮箱地址 */
    public var email: String?
    /** 邮箱已验证 */
    public var emailIsValid: Bool?
    /** 手机号码 */
    public var phone: String?
    /** 手机号码已验证 */
    public var phoneIsValid: Bool?
    /** 关系链 */
    public var relationChain: String?
    /** 兴趣标签 */
    public var interestTags: String?
    /** 个人简介 */
    public var biography: String?
    /** 性别 */
    public var gender: String?
    /** 生日 */
    public var birthday: Date?
    /** 职业 */
    public var occupation: String?
    /** 学历 */
    public var education: String?
    /** 联系方式 */
    public var contact: String?
    /** 语言 */
    public var languages: String?
    /** 社交网络链接 */
    public var socialLinks: String?
    /** 婚姻状态 */
    public var relationshipStatus: String?
    /** 公司 */
    public var company: String?
    /** 行业 */
    public var industry: String?
    /** 行业职位 */
    public var companyPosition: String?
    /** 私密设置 */
    public var privateSettings: String?
    /** 账户是否锁定 */
    public var isLock: Bool?
    /** 账户锁定截止时间 */
    public var lockUntil: Date?
    /** 能使用用户名登录 */
    public var enableUserNameSignIn: Bool?
    /** 能使用邮箱登录 */
    public var enableEmailSignIn: Bool?
    /** 能使用电话号码登录 */
    public var enablePhoneSignIn: Bool?
    /** 能使用联合身份标识登录 */
    public var enableUnionIDSignIn: Bool?
    /** 能使用OAuth认证方式登录 */
    public var enableOAuth: Bool?
    /** 启用双因素认证登录 */
    public var enable2FAAuth: Bool?
    /** 创建时间 */
    public var createDate: Date?
    /** 最后更新时间 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, platform: String? = nil, unionID: String? = nil, nickName: String? = nil, avatar: String? = nil, data: String? = nil, userName: String? = nil, pwd: String? = nil, email: String? = nil, emailIsValid: Bool? = nil, phone: String? = nil, phoneIsValid: Bool? = nil, relationChain: String? = nil, interestTags: String? = nil, biography: String? = nil, gender: String? = nil, birthday: Date? = nil, occupation: String? = nil, education: String? = nil, contact: String? = nil, languages: String? = nil, socialLinks: String? = nil, relationshipStatus: String? = nil, company: String? = nil, industry: String? = nil, companyPosition: String? = nil, privateSettings: String? = nil, isLock: Bool? = nil, lockUntil: Date? = nil, enableUserNameSignIn: Bool? = nil, enableEmailSignIn: Bool? = nil, enablePhoneSignIn: Bool? = nil, enableUnionIDSignIn: Bool? = nil, enableOAuth: Bool? = nil, enable2FAAuth: Bool? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.platform = platform
        self.unionID = unionID
        self.nickName = nickName
        self.avatar = avatar
        self.data = data
        self.userName = userName
        self.pwd = pwd
        self.email = email
        self.emailIsValid = emailIsValid
        self.phone = phone
        self.phoneIsValid = phoneIsValid
        self.relationChain = relationChain
        self.interestTags = interestTags
        self.biography = biography
        self.gender = gender
        self.birthday = birthday
        self.occupation = occupation
        self.education = education
        self.contact = contact
        self.languages = languages
        self.socialLinks = socialLinks
        self.relationshipStatus = relationshipStatus
        self.company = company
        self.industry = industry
        self.companyPosition = companyPosition
        self.privateSettings = privateSettings
        self.isLock = isLock
        self.lockUntil = lockUntil
        self.enableUserNameSignIn = enableUserNameSignIn
        self.enableEmailSignIn = enableEmailSignIn
        self.enablePhoneSignIn = enablePhoneSignIn
        self.enableUnionIDSignIn = enableUnionIDSignIn
        self.enableOAuth = enableOAuth
        self.enable2FAAuth = enable2FAAuth
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case platform
        case unionID
        case nickName
        case avatar
        case data
        case userName
        case pwd
        case email
        case emailIsValid
        case phone
        case phoneIsValid
        case relationChain
        case interestTags
        case biography
        case gender
        case birthday
        case occupation
        case education
        case contact
        case languages
        case socialLinks
        case relationshipStatus
        case company
        case industry
        case companyPosition
        case privateSettings
        case isLock
        case lockUntil
        case enableUserNameSignIn
        case enableEmailSignIn
        case enablePhoneSignIn
        case enableUnionIDSignIn
        case enableOAuth
        case enable2FAAuth
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(unionID, forKey: .unionID)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(pwd, forKey: .pwd)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailIsValid, forKey: .emailIsValid)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(phoneIsValid, forKey: .phoneIsValid)
        try container.encodeIfPresent(relationChain, forKey: .relationChain)
        try container.encodeIfPresent(interestTags, forKey: .interestTags)
        try container.encodeIfPresent(biography, forKey: .biography)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(occupation, forKey: .occupation)
        try container.encodeIfPresent(education, forKey: .education)
        try container.encodeIfPresent(contact, forKey: .contact)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(socialLinks, forKey: .socialLinks)
        try container.encodeIfPresent(relationshipStatus, forKey: .relationshipStatus)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(industry, forKey: .industry)
        try container.encodeIfPresent(companyPosition, forKey: .companyPosition)
        try container.encodeIfPresent(privateSettings, forKey: .privateSettings)
        try container.encodeIfPresent(isLock, forKey: .isLock)
        try container.encodeIfPresent(lockUntil, forKey: .lockUntil)
        try container.encodeIfPresent(enableUserNameSignIn, forKey: .enableUserNameSignIn)
        try container.encodeIfPresent(enableEmailSignIn, forKey: .enableEmailSignIn)
        try container.encodeIfPresent(enablePhoneSignIn, forKey: .enablePhoneSignIn)
        try container.encodeIfPresent(enableUnionIDSignIn, forKey: .enableUnionIDSignIn)
        try container.encodeIfPresent(enableOAuth, forKey: .enableOAuth)
        try container.encodeIfPresent(enable2FAAuth, forKey: .enable2FAAuth)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension User: Identifiable {}
