//
// CurrencyTransaction.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 货币交易记录实体，用于记录用户的货币交易详情。 */
public struct CurrencyTransaction: Codable, JSONEncodable, Hashable {

    public static let transactionTypeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let currencyTypeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let statusRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let remarkRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 货币交易记录的唯一标识符。 */
    public var id: Int64?
    /** 发起交易的发送方用户ID，若为转账交易时必填。 */
    public var fromUserID: Int64?
    /** 进行货币交易的用户ID。 */
    public var userID: Int64?
    /** 货币交易的类型，例如 '消费', '奖励', '兑换', '转账' 等。 */
    public var transactionType: String?
    /** 交易的货币类型，例如 'USD', 'CNY' 等。 */
    public var currencyType: String?
    /** 货币的变动数量，正数表示增加，负数表示减少。 */
    public var currencyChange: Int64?
    /** 交易完成后的货币余额。 */
    public var currencyBalance: Double?
    /** 描述货币变动的具体原因或相关交易详情。 */
    public var description: String?
    /** 货币交易的当前状态，例如 '成功', '失败', '待审核' 等。 */
    public var status: String?
    /** 交易的额外信息或管理员的备注。 */
    public var remark: String?
    /** 用于分类或标记交易的标签。 */
    public var tags: String?
    /** 货币交易发生的时间，默认为当前时间。 */
    public var createDate: Date?

    public init(id: Int64? = nil, fromUserID: Int64? = nil, userID: Int64? = nil, transactionType: String? = nil, currencyType: String? = nil, currencyChange: Int64? = nil, currencyBalance: Double? = nil, description: String? = nil, status: String? = nil, remark: String? = nil, tags: String? = nil, createDate: Date? = nil) {
        self.id = id
        self.fromUserID = fromUserID
        self.userID = userID
        self.transactionType = transactionType
        self.currencyType = currencyType
        self.currencyChange = currencyChange
        self.currencyBalance = currencyBalance
        self.description = description
        self.status = status
        self.remark = remark
        self.tags = tags
        self.createDate = createDate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fromUserID
        case userID
        case transactionType
        case currencyType
        case currencyChange
        case currencyBalance
        case description
        case status
        case remark
        case tags
        case createDate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(fromUserID, forKey: .fromUserID)
        try container.encodeIfPresent(userID, forKey: .userID)
        try container.encodeIfPresent(transactionType, forKey: .transactionType)
        try container.encodeIfPresent(currencyType, forKey: .currencyType)
        try container.encodeIfPresent(currencyChange, forKey: .currencyChange)
        try container.encodeIfPresent(currencyBalance, forKey: .currencyBalance)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(remark, forKey: .remark)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(createDate, forKey: .createDate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CurrencyTransaction: Identifiable {}
