//
// GeoLocation.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 地理位置 */
public struct GeoLocation: Codable, JSONEncodable, Hashable {

    public static let bizCodeRule = StringRule(minLength: 1, maxLength: 255, pattern: nil)
    public static let locationNameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let locationTypeRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let recipientNameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let phoneNumberRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let emailRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let countryRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let stateRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let cityRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let districtRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let streetRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let zipCodeRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let addressRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let mapTypeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let remarkRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 唯一标识 */
    public var id: Int?
    /** 业务代码 */
    public var bizCode: String
    /** 业务ID */
    public var bizID: Int64
    public var coordinates: MySqlGeometry
    /** 地点的名称 */
    public var locationName: String?
    /** 地点类型 */
    public var locationType: String?
    /** 收货人姓名 */
    public var recipientName: String?
    /** 收货人联系电话 */
    public var phoneNumber: String?
    /** 收货人电子邮件 */
    public var email: String?
    /** 国家 */
    public var country: String?
    /** 州/省 */
    public var state: String?
    /** 城市 */
    public var city: String?
    /** 区/县 */
    public var district: String?
    /** 街道 */
    public var street: String?
    /** 邮政编码 */
    public var zipCode: String?
    /** 详细的地址信息 */
    public var address: String?
    /** 地址类型 */
    public var mapType: String?
    /** 备注 */
    public var remark: String?
    /** 标签 */
    public var tags: String?
    /** 是否启用 */
    public var enable: Bool?
    /** 排序索引 */
    public var showIndex: Int?
    /** 创建时间 */
    public var createDate: Date?
    /** 最后更新时间 */
    public var lastUpdate: Date?

    public init(id: Int? = nil, bizCode: String, bizID: Int64, coordinates: MySqlGeometry, locationName: String? = nil, locationType: String? = nil, recipientName: String? = nil, phoneNumber: String? = nil, email: String? = nil, country: String? = nil, state: String? = nil, city: String? = nil, district: String? = nil, street: String? = nil, zipCode: String? = nil, address: String? = nil, mapType: String? = nil, remark: String? = nil, tags: String? = nil, enable: Bool? = nil, showIndex: Int? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.bizCode = bizCode
        self.bizID = bizID
        self.coordinates = coordinates
        self.locationName = locationName
        self.locationType = locationType
        self.recipientName = recipientName
        self.phoneNumber = phoneNumber
        self.email = email
        self.country = country
        self.state = state
        self.city = city
        self.district = district
        self.street = street
        self.zipCode = zipCode
        self.address = address
        self.mapType = mapType
        self.remark = remark
        self.tags = tags
        self.enable = enable
        self.showIndex = showIndex
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case bizCode
        case bizID
        case coordinates
        case locationName
        case locationType
        case recipientName
        case phoneNumber
        case email
        case country
        case state
        case city
        case district
        case street
        case zipCode
        case address
        case mapType
        case remark
        case tags
        case enable
        case showIndex
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encode(bizCode, forKey: .bizCode)
        try container.encode(bizID, forKey: .bizID)
        try container.encode(coordinates, forKey: .coordinates)
        try container.encodeIfPresent(locationName, forKey: .locationName)
        try container.encodeIfPresent(locationType, forKey: .locationType)
        try container.encodeIfPresent(recipientName, forKey: .recipientName)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(district, forKey: .district)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(mapType, forKey: .mapType)
        try container.encodeIfPresent(remark, forKey: .remark)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(enable, forKey: .enable)
        try container.encodeIfPresent(showIndex, forKey: .showIndex)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension GeoLocation: Identifiable {}
