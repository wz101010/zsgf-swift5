//
// UserQRCodeScanResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserQRCodeScanResult: Codable, JSONEncodable, Hashable {

    public var appID: Int64?
    public var name: String?
    public var logo: String?
    public var website: String?
    public var description: String?
    public var tags: String?
    public var scopes: String?
    public var remark: String?
    public var scheme: String?

    public init(appID: Int64? = nil, name: String? = nil, logo: String? = nil, website: String? = nil, description: String? = nil, tags: String? = nil, scopes: String? = nil, remark: String? = nil, scheme: String? = nil) {
        self.appID = appID
        self.name = name
        self.logo = logo
        self.website = website
        self.description = description
        self.tags = tags
        self.scopes = scopes
        self.remark = remark
        self.scheme = scheme
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appID
        case name
        case logo
        case website
        case description
        case tags
        case scopes
        case remark
        case scheme
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appID, forKey: .appID)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(scopes, forKey: .scopes)
        try container.encodeIfPresent(remark, forKey: .remark)
        try container.encodeIfPresent(scheme, forKey: .scheme)
    }
}

