//
// BkAgentRespInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct BkAgentRespInfo: Codable, JSONEncodable, Hashable {

    public var bindclrissrId: String?
    public var bindpyeracctbkId: String?
    public var bindtrxId: String?
    public var bkpyeruserCode: String?
    public var estterLocation: String?

    public init(bindclrissrId: String? = nil, bindpyeracctbkId: String? = nil, bindtrxId: String? = nil, bkpyeruserCode: String? = nil, estterLocation: String? = nil) {
        self.bindclrissrId = bindclrissrId
        self.bindpyeracctbkId = bindpyeracctbkId
        self.bindtrxId = bindtrxId
        self.bkpyeruserCode = bkpyeruserCode
        self.estterLocation = estterLocation
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case bindclrissrId
        case bindpyeracctbkId
        case bindtrxId
        case bkpyeruserCode
        case estterLocation
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(bindclrissrId, forKey: .bindclrissrId)
        try container.encodeIfPresent(bindpyeracctbkId, forKey: .bindpyeracctbkId)
        try container.encodeIfPresent(bindtrxId, forKey: .bindtrxId)
        try container.encodeIfPresent(bkpyeruserCode, forKey: .bkpyeruserCode)
        try container.encodeIfPresent(estterLocation, forKey: .estterLocation)
    }
}

