//
// UserProfileResult.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UserProfileResult: Codable, JSONEncodable, Hashable {

    public var appKey: String?
    public var platform: String?
    public var unionID: String?
    public var phone: String?
    public var createDate: Date?
    public var userName: String?
    public var phoneIsValid: Bool?
    public var data: String?
    public var email: String?
    public var emailIsValid: Bool?
    public var lastUpdate: Date?
    public var nickName: String?
    public var id: Int64?
    public var avatar: String?
    public var currencies: [UserCurrency]?
    public var role: String?

    public init(appKey: String? = nil, platform: String? = nil, unionID: String? = nil, phone: String? = nil, createDate: Date? = nil, userName: String? = nil, phoneIsValid: Bool? = nil, data: String? = nil, email: String? = nil, emailIsValid: Bool? = nil, lastUpdate: Date? = nil, nickName: String? = nil, id: Int64? = nil, avatar: String? = nil, currencies: [UserCurrency]? = nil, role: String? = nil) {
        self.appKey = appKey
        self.platform = platform
        self.unionID = unionID
        self.phone = phone
        self.createDate = createDate
        self.userName = userName
        self.phoneIsValid = phoneIsValid
        self.data = data
        self.email = email
        self.emailIsValid = emailIsValid
        self.lastUpdate = lastUpdate
        self.nickName = nickName
        self.id = id
        self.avatar = avatar
        self.currencies = currencies
        self.role = role
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case appKey
        case platform
        case unionID
        case phone
        case createDate
        case userName
        case phoneIsValid
        case data
        case email
        case emailIsValid
        case lastUpdate
        case nickName
        case id
        case avatar
        case currencies
        case role
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(appKey, forKey: .appKey)
        try container.encodeIfPresent(platform, forKey: .platform)
        try container.encodeIfPresent(unionID, forKey: .unionID)
        try container.encodeIfPresent(phone, forKey: .phone)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(userName, forKey: .userName)
        try container.encodeIfPresent(phoneIsValid, forKey: .phoneIsValid)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailIsValid, forKey: .emailIsValid)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(currencies, forKey: .currencies)
        try container.encodeIfPresent(role, forKey: .role)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserProfileResult: Identifiable {}
