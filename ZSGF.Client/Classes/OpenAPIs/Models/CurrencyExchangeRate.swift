//
// CurrencyExchangeRate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 货币兑换比率实体，用于表示不同货币之间的兑换关系。 */
public struct CurrencyExchangeRate: Codable, JSONEncodable, Hashable {

    public static let fromCurrencyCodeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let toCurrencyCodeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let descriptionRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 货币兑换比率的唯一标识符。 */
    public var id: Int64?
    /** 兑换的源货币代码，例如 'USD'。 */
    public var fromCurrencyCode: String?
    /** 兑换的目标货币代码，例如 'CNY'。 */
    public var toCurrencyCode: String?
    /** 从源货币到目标货币的兑换比率。例如，1 USD = 6.5 CNY。 */
    public var exchangeRate: Int64?
    /** 兑换比率的详细描述信息。 */
    public var description: String?
    /** 货币兑换比率的创建日期，默认为当前时间。 */
    public var createDate: Date?
    /** 货币兑换比率的最后更新日期，默认为当前时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, fromCurrencyCode: String? = nil, toCurrencyCode: String? = nil, exchangeRate: Int64? = nil, description: String? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.fromCurrencyCode = fromCurrencyCode
        self.toCurrencyCode = toCurrencyCode
        self.exchangeRate = exchangeRate
        self.description = description
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case fromCurrencyCode
        case toCurrencyCode
        case exchangeRate
        case description
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(fromCurrencyCode, forKey: .fromCurrencyCode)
        try container.encodeIfPresent(toCurrencyCode, forKey: .toCurrencyCode)
        try container.encodeIfPresent(exchangeRate, forKey: .exchangeRate)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension CurrencyExchangeRate: Identifiable {}
