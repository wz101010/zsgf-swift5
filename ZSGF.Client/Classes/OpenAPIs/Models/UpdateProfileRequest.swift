//
// UpdateProfileRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateProfileRequest: Codable, JSONEncodable, Hashable {

    public static let avatarRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let nickNameRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let biographyRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public static let genderRule = StringRule(minLength: nil, maxLength: 15, pattern: nil)
    public static let occupationRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let educationRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let contactRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let languagesRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let socialLinksRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let relationshipStatusRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let companyRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let industryRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let companyPositionRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let privateSettingsRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    /** 用户头像的链接或路径 */
    public var avatar: String?
    /** 用户的其他数据，可以是序列化后的对象或JSON字符串 */
    public var data: String?
    /** 用户的昵称 */
    public var nickName: String?
    /** 兴趣标签 */
    public var interestTags: String?
    /** 个人简介 */
    public var biography: String?
    /** 性别 */
    public var gender: String?
    /** 生日 */
    public var birthday: Date?
    /** 职业 */
    public var occupation: String?
    /** 学历 */
    public var education: String?
    /** 联系方式 */
    public var contact: String?
    /** 语言 */
    public var languages: String?
    /** 社交网络链接 */
    public var socialLinks: String?
    /** 婚姻状态 */
    public var relationshipStatus: String?
    /** 公司 */
    public var company: String?
    /** 行业 */
    public var industry: String?
    /** 行业职位 */
    public var companyPosition: String?
    /** 私密设置 */
    public var privateSettings: String?

    public init(avatar: String? = nil, data: String? = nil, nickName: String? = nil, interestTags: String? = nil, biography: String? = nil, gender: String? = nil, birthday: Date? = nil, occupation: String? = nil, education: String? = nil, contact: String? = nil, languages: String? = nil, socialLinks: String? = nil, relationshipStatus: String? = nil, company: String? = nil, industry: String? = nil, companyPosition: String? = nil, privateSettings: String? = nil) {
        self.avatar = avatar
        self.data = data
        self.nickName = nickName
        self.interestTags = interestTags
        self.biography = biography
        self.gender = gender
        self.birthday = birthday
        self.occupation = occupation
        self.education = education
        self.contact = contact
        self.languages = languages
        self.socialLinks = socialLinks
        self.relationshipStatus = relationshipStatus
        self.company = company
        self.industry = industry
        self.companyPosition = companyPosition
        self.privateSettings = privateSettings
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case avatar
        case data
        case nickName
        case interestTags
        case biography
        case gender
        case birthday
        case occupation
        case education
        case contact
        case languages
        case socialLinks
        case relationshipStatus
        case company
        case industry
        case companyPosition
        case privateSettings
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(interestTags, forKey: .interestTags)
        try container.encodeIfPresent(biography, forKey: .biography)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(occupation, forKey: .occupation)
        try container.encodeIfPresent(education, forKey: .education)
        try container.encodeIfPresent(contact, forKey: .contact)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(socialLinks, forKey: .socialLinks)
        try container.encodeIfPresent(relationshipStatus, forKey: .relationshipStatus)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(industry, forKey: .industry)
        try container.encodeIfPresent(companyPosition, forKey: .companyPosition)
        try container.encodeIfPresent(privateSettings, forKey: .privateSettings)
    }
}

