//
// UpdateProfileRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct UpdateProfileRequest: Codable, JSONEncodable, Hashable {

    public static let avatarRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let nickNameRule = StringRule(minLength: 4, maxLength: 32, pattern: nil)
    public static let biographyRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    public static let genderRule = StringRule(minLength: nil, maxLength: 15, pattern: nil)
    public static let occupationRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let educationRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let contactRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let languagesRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let socialLinksRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let relationshipStatusRule = StringRule(minLength: nil, maxLength: 20, pattern: nil)
    public static let companyRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let industryRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let companyPositionRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let privateSettingsRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    /** 用户头像的链接或路径，长度不能超过255个字符 */
    public var avatar: String?
    /** 用户的其他数据，可以是序列化后的对象或JSON字符串 */
    public var data: String?
    /** 用户的昵称，长度不能超过50个字符 */
    public var nickName: String?
    /** 兴趣标签 */
    public var interestTags: String?
    /** 个人简介，长度不能超过500个字符 */
    public var biography: String?
    /** 性别，长度不能超过15个字符 */
    public var gender: String?
    /** 生日 */
    public var birthday: Date?
    /** 职业，长度不能超过50个字符 */
    public var occupation: String?
    /** 学历，长度不能超过50个字符 */
    public var education: String?
    /** 联系方式，长度不能超过255个字符 */
    public var contact: String?
    /** 语言，长度不能超过50个字符 */
    public var languages: String?
    /** 社交网络链接，长度不能超过255个字符 */
    public var socialLinks: String?
    /** 婚姻状态，长度不能超过20个字符 */
    public var relationshipStatus: String?
    /** 公司，长度不能超过100个字符 */
    public var company: String?
    /** 行业，长度不能超过50个字符 */
    public var industry: String?
    /** 行业职位，长度不能超过50个字符 */
    public var companyPosition: String?
    /** 私密设置，长度不能超过500个字符 */
    public var privateSettings: String?
    /** 是否启用二步验证 */
    public var enable2FAAuth: Bool?
    /** 是否启用账号登录 */
    public var enableUserNameSignIn: Bool?
    /** 是否启用邮箱登录 */
    public var enableEmailSignIn: Bool?
    /** 是否启用手机登录 */
    public var enablePhoneSignIn: Bool?
    /** 是否启用UnionID登录 */
    public var enableUnionIDSignIn: Bool?
    /** 是否启用OAuth2登录 */
    public var enableOAuth: Bool?

    public init(avatar: String? = nil, data: String? = nil, nickName: String? = nil, interestTags: String? = nil, biography: String? = nil, gender: String? = nil, birthday: Date? = nil, occupation: String? = nil, education: String? = nil, contact: String? = nil, languages: String? = nil, socialLinks: String? = nil, relationshipStatus: String? = nil, company: String? = nil, industry: String? = nil, companyPosition: String? = nil, privateSettings: String? = nil, enable2FAAuth: Bool? = nil, enableUserNameSignIn: Bool? = nil, enableEmailSignIn: Bool? = nil, enablePhoneSignIn: Bool? = nil, enableUnionIDSignIn: Bool? = nil, enableOAuth: Bool? = nil) {
        self.avatar = avatar
        self.data = data
        self.nickName = nickName
        self.interestTags = interestTags
        self.biography = biography
        self.gender = gender
        self.birthday = birthday
        self.occupation = occupation
        self.education = education
        self.contact = contact
        self.languages = languages
        self.socialLinks = socialLinks
        self.relationshipStatus = relationshipStatus
        self.company = company
        self.industry = industry
        self.companyPosition = companyPosition
        self.privateSettings = privateSettings
        self.enable2FAAuth = enable2FAAuth
        self.enableUserNameSignIn = enableUserNameSignIn
        self.enableEmailSignIn = enableEmailSignIn
        self.enablePhoneSignIn = enablePhoneSignIn
        self.enableUnionIDSignIn = enableUnionIDSignIn
        self.enableOAuth = enableOAuth
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case avatar
        case data
        case nickName
        case interestTags
        case biography
        case gender
        case birthday
        case occupation
        case education
        case contact
        case languages
        case socialLinks
        case relationshipStatus
        case company
        case industry
        case companyPosition
        case privateSettings
        case enable2FAAuth
        case enableUserNameSignIn
        case enableEmailSignIn
        case enablePhoneSignIn
        case enableUnionIDSignIn
        case enableOAuth
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(data, forKey: .data)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(interestTags, forKey: .interestTags)
        try container.encodeIfPresent(biography, forKey: .biography)
        try container.encodeIfPresent(gender, forKey: .gender)
        try container.encodeIfPresent(birthday, forKey: .birthday)
        try container.encodeIfPresent(occupation, forKey: .occupation)
        try container.encodeIfPresent(education, forKey: .education)
        try container.encodeIfPresent(contact, forKey: .contact)
        try container.encodeIfPresent(languages, forKey: .languages)
        try container.encodeIfPresent(socialLinks, forKey: .socialLinks)
        try container.encodeIfPresent(relationshipStatus, forKey: .relationshipStatus)
        try container.encodeIfPresent(company, forKey: .company)
        try container.encodeIfPresent(industry, forKey: .industry)
        try container.encodeIfPresent(companyPosition, forKey: .companyPosition)
        try container.encodeIfPresent(privateSettings, forKey: .privateSettings)
        try container.encodeIfPresent(enable2FAAuth, forKey: .enable2FAAuth)
        try container.encodeIfPresent(enableUserNameSignIn, forKey: .enableUserNameSignIn)
        try container.encodeIfPresent(enableEmailSignIn, forKey: .enableEmailSignIn)
        try container.encodeIfPresent(enablePhoneSignIn, forKey: .enablePhoneSignIn)
        try container.encodeIfPresent(enableUnionIDSignIn, forKey: .enableUnionIDSignIn)
        try container.encodeIfPresent(enableOAuth, forKey: .enableOAuth)
    }
}

