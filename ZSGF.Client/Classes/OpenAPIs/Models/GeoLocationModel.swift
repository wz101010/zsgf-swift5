//
// GeoLocationModel.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct GeoLocationModel: Codable, JSONEncodable, Hashable {

    /** 纬度 */
    public var latitude: Double?
    /** 经度 */
    public var longitude: Double?
    /** 地点的名称 */
    public var locationName: String?
    /** 地点的类型，如家庭、工作、学校等 */
    public var locationType: String?
    /** 收货人姓名 */
    public var recipientName: String?
    /** 收货人联系电话 */
    public var phoneNumber: String?
    /** 收货人电子邮件 */
    public var email: String?
    /** 国家 */
    public var country: String?
    /** 州/省 */
    public var state: String?
    /** 城市 */
    public var city: String?
    /** 区/县 */
    public var district: String?
    /** 街道 */
    public var street: String?
    /** 邮政编码 */
    public var zipCode: String?
    /** 详细的地址信息 */
    public var address: String?
    /** 地址类型，百度、高德、谷歌 */
    public var mapType: String?
    /** 备注 */
    public var remark: String?
    /** 标签 */
    public var tags: String?
    /** 启用 */
    public var enable: Bool?
    /** 排序 */
    public var showIndex: Int?
    /** 创建时间 */
    public var createDate: Date?
    /** 最后更新的时间 */
    public var lastUpdate: Date?

    public init(latitude: Double? = nil, longitude: Double? = nil, locationName: String? = nil, locationType: String? = nil, recipientName: String? = nil, phoneNumber: String? = nil, email: String? = nil, country: String? = nil, state: String? = nil, city: String? = nil, district: String? = nil, street: String? = nil, zipCode: String? = nil, address: String? = nil, mapType: String? = nil, remark: String? = nil, tags: String? = nil, enable: Bool? = nil, showIndex: Int? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.latitude = latitude
        self.longitude = longitude
        self.locationName = locationName
        self.locationType = locationType
        self.recipientName = recipientName
        self.phoneNumber = phoneNumber
        self.email = email
        self.country = country
        self.state = state
        self.city = city
        self.district = district
        self.street = street
        self.zipCode = zipCode
        self.address = address
        self.mapType = mapType
        self.remark = remark
        self.tags = tags
        self.enable = enable
        self.showIndex = showIndex
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case latitude
        case longitude
        case locationName
        case locationType
        case recipientName
        case phoneNumber
        case email
        case country
        case state
        case city
        case district
        case street
        case zipCode
        case address
        case mapType
        case remark
        case tags
        case enable
        case showIndex
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(latitude, forKey: .latitude)
        try container.encodeIfPresent(longitude, forKey: .longitude)
        try container.encodeIfPresent(locationName, forKey: .locationName)
        try container.encodeIfPresent(locationType, forKey: .locationType)
        try container.encodeIfPresent(recipientName, forKey: .recipientName)
        try container.encodeIfPresent(phoneNumber, forKey: .phoneNumber)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(country, forKey: .country)
        try container.encodeIfPresent(state, forKey: .state)
        try container.encodeIfPresent(city, forKey: .city)
        try container.encodeIfPresent(district, forKey: .district)
        try container.encodeIfPresent(street, forKey: .street)
        try container.encodeIfPresent(zipCode, forKey: .zipCode)
        try container.encodeIfPresent(address, forKey: .address)
        try container.encodeIfPresent(mapType, forKey: .mapType)
        try container.encodeIfPresent(remark, forKey: .remark)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(enable, forKey: .enable)
        try container.encodeIfPresent(showIndex, forKey: .showIndex)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}

