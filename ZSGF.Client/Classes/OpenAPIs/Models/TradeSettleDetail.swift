//
// TradeSettleDetail.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct TradeSettleDetail: Codable, JSONEncodable, Hashable {

    public var amount: String?
    public var operationDt: String?
    public var operationSerialNo: String?
    public var operationType: String?
    public var oriTransIn: String?
    public var oriTransOut: String?
    public var transIn: String?
    public var transOut: String?

    public init(amount: String? = nil, operationDt: String? = nil, operationSerialNo: String? = nil, operationType: String? = nil, oriTransIn: String? = nil, oriTransOut: String? = nil, transIn: String? = nil, transOut: String? = nil) {
        self.amount = amount
        self.operationDt = operationDt
        self.operationSerialNo = operationSerialNo
        self.operationType = operationType
        self.oriTransIn = oriTransIn
        self.oriTransOut = oriTransOut
        self.transIn = transIn
        self.transOut = transOut
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case amount
        case operationDt
        case operationSerialNo
        case operationType
        case oriTransIn
        case oriTransOut
        case transIn
        case transOut
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(operationDt, forKey: .operationDt)
        try container.encodeIfPresent(operationSerialNo, forKey: .operationSerialNo)
        try container.encodeIfPresent(operationType, forKey: .operationType)
        try container.encodeIfPresent(oriTransIn, forKey: .oriTransIn)
        try container.encodeIfPresent(oriTransOut, forKey: .oriTransOut)
        try container.encodeIfPresent(transIn, forKey: .transIn)
        try container.encodeIfPresent(transOut, forKey: .transOut)
    }
}

