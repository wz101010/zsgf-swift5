//
// IntactChargeInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct IntactChargeInfo: Codable, JSONEncodable, Hashable {

    public var actualAmount: String?
    public var billType: String?
    public var gmtPay: String?
    public var isRefund: Bool?
    public var outBizNo: String?
    public var planAmount: String?
    public var productName: String?
    public var serviceTarget: String?
    public var serviceType: String?
    public var status: String?
    public var targetAccountNo: String?
    public var targetUserId: String?

    public init(actualAmount: String? = nil, billType: String? = nil, gmtPay: String? = nil, isRefund: Bool? = nil, outBizNo: String? = nil, planAmount: String? = nil, productName: String? = nil, serviceTarget: String? = nil, serviceType: String? = nil, status: String? = nil, targetAccountNo: String? = nil, targetUserId: String? = nil) {
        self.actualAmount = actualAmount
        self.billType = billType
        self.gmtPay = gmtPay
        self.isRefund = isRefund
        self.outBizNo = outBizNo
        self.planAmount = planAmount
        self.productName = productName
        self.serviceTarget = serviceTarget
        self.serviceType = serviceType
        self.status = status
        self.targetAccountNo = targetAccountNo
        self.targetUserId = targetUserId
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case actualAmount
        case billType
        case gmtPay
        case isRefund
        case outBizNo
        case planAmount
        case productName
        case serviceTarget
        case serviceType
        case status
        case targetAccountNo
        case targetUserId
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(actualAmount, forKey: .actualAmount)
        try container.encodeIfPresent(billType, forKey: .billType)
        try container.encodeIfPresent(gmtPay, forKey: .gmtPay)
        try container.encodeIfPresent(isRefund, forKey: .isRefund)
        try container.encodeIfPresent(outBizNo, forKey: .outBizNo)
        try container.encodeIfPresent(planAmount, forKey: .planAmount)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(serviceTarget, forKey: .serviceTarget)
        try container.encodeIfPresent(serviceType, forKey: .serviceType)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(targetAccountNo, forKey: .targetAccountNo)
        try container.encodeIfPresent(targetUserId, forKey: .targetUserId)
    }
}

