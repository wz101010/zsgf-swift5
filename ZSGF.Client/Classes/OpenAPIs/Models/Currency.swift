//
// Currency.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 货币实体，用于表示和管理不同类型的货币信息。 */
public struct Currency: Codable, JSONEncodable, Hashable {

    public static let nameRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let codeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let symbolRule = StringRule(minLength: nil, maxLength: 10, pattern: nil)
    public static let issuerRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let currencyTypeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let descriptionRule = StringRule(minLength: nil, maxLength: 500, pattern: nil)
    /** 货币的唯一标识符。 */
    public var id: Int64?
    /** 货币的名称，例如 '人民币', '美元' 等。 */
    public var name: String?
    /** 货币的ISO标准代码，例如 'CNY', 'USD' 等。 */
    public var code: String?
    /** 货币的符号，例如 '$', '€', '¥' 等。 */
    public var symbol: String?
    /** 发行该货币的机构或国家名称。 */
    public var issuer: String?
    /** 货币的类型，例如 '法定货币', '加密货币' 等。 */
    public var currencyType: String?
    /** 用于分类或标记货币的标签。 */
    public var tags: String?
    /** 指示货币当前是否可用。 */
    public var status: Bool?
    /** 指示该货币是否允许进行虚拟充值。 */
    public var enableVirtualRecharge: Bool?
    /** 指示该货币是否允许进行虚拟消费。 */
    public var enableVirtualConsume: Bool?
    /** 货币的详细描述信息。 */
    public var description: String?
    /** 该货币与法定货币的兑换比率。 */
    public var fiatExchangeRate: Int64?
    /** 每日通过法定货币充值的最大限额。 */
    public var fiatDailyRechargeLimit: Int64?
    /** 货币的总供应量，0 表示无限制。 */
    public var totalSupply: Int64?
    /** 货币记录的创建日期，默认为当前时间。 */
    public var createDate: Date?
    /** 货币记录的最后更新日期，默认为当前时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, name: String? = nil, code: String? = nil, symbol: String? = nil, issuer: String? = nil, currencyType: String? = nil, tags: String? = nil, status: Bool? = nil, enableVirtualRecharge: Bool? = nil, enableVirtualConsume: Bool? = nil, description: String? = nil, fiatExchangeRate: Int64? = nil, fiatDailyRechargeLimit: Int64? = nil, totalSupply: Int64? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.name = name
        self.code = code
        self.symbol = symbol
        self.issuer = issuer
        self.currencyType = currencyType
        self.tags = tags
        self.status = status
        self.enableVirtualRecharge = enableVirtualRecharge
        self.enableVirtualConsume = enableVirtualConsume
        self.description = description
        self.fiatExchangeRate = fiatExchangeRate
        self.fiatDailyRechargeLimit = fiatDailyRechargeLimit
        self.totalSupply = totalSupply
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case name
        case code
        case symbol
        case issuer
        case currencyType
        case tags
        case status
        case enableVirtualRecharge
        case enableVirtualConsume
        case description
        case fiatExchangeRate
        case fiatDailyRechargeLimit
        case totalSupply
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(symbol, forKey: .symbol)
        try container.encodeIfPresent(issuer, forKey: .issuer)
        try container.encodeIfPresent(currencyType, forKey: .currencyType)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(enableVirtualRecharge, forKey: .enableVirtualRecharge)
        try container.encodeIfPresent(enableVirtualConsume, forKey: .enableVirtualConsume)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(fiatExchangeRate, forKey: .fiatExchangeRate)
        try container.encodeIfPresent(fiatDailyRechargeLimit, forKey: .fiatDailyRechargeLimit)
        try container.encodeIfPresent(totalSupply, forKey: .totalSupply)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Currency: Identifiable {}
