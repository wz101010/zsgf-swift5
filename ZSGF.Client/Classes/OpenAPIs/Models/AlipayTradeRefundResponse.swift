//
// AlipayTradeRefundResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct AlipayTradeRefundResponse: Codable, JSONEncodable, Hashable {

    public var code: String?
    public var msg: String?
    public var subCode: String?
    public var subMsg: String?
    public var body: String?
    public var isError: Bool?
    public var buyerLogonId: String?
    public var buyerOpenId: String?
    public var buyerUserId: String?
    public var fundChange: String?
    public var gmtRefundPay: String?
    public var hasDepositBack: String?
    public var openId: String?
    public var outTradeNo: String?
    public var preAuthCancelFee: String?
    public var presentRefundBuyerAmount: String?
    public var presentRefundDiscountAmount: String?
    public var presentRefundMdiscountAmount: String?
    public var refundChargeAmount: String?
    public var refundChargeInfoList: [RefundChargeInfo]?
    public var refundCurrency: String?
    public var refundDetailItemList: [TradeFundBill]?
    public var refundFee: String?
    public var refundHybAmount: String?
    public var refundPresetPaytoolList: PresetPayToolInfo?
    public var refundSettlementId: String?
    public var refundVoucherDetailList: [VoucherDetail]?
    public var sendBackFee: String?
    public var storeName: String?
    public var tradeNo: String?

    public init(code: String? = nil, msg: String? = nil, subCode: String? = nil, subMsg: String? = nil, body: String? = nil, isError: Bool? = nil, buyerLogonId: String? = nil, buyerOpenId: String? = nil, buyerUserId: String? = nil, fundChange: String? = nil, gmtRefundPay: String? = nil, hasDepositBack: String? = nil, openId: String? = nil, outTradeNo: String? = nil, preAuthCancelFee: String? = nil, presentRefundBuyerAmount: String? = nil, presentRefundDiscountAmount: String? = nil, presentRefundMdiscountAmount: String? = nil, refundChargeAmount: String? = nil, refundChargeInfoList: [RefundChargeInfo]? = nil, refundCurrency: String? = nil, refundDetailItemList: [TradeFundBill]? = nil, refundFee: String? = nil, refundHybAmount: String? = nil, refundPresetPaytoolList: PresetPayToolInfo? = nil, refundSettlementId: String? = nil, refundVoucherDetailList: [VoucherDetail]? = nil, sendBackFee: String? = nil, storeName: String? = nil, tradeNo: String? = nil) {
        self.code = code
        self.msg = msg
        self.subCode = subCode
        self.subMsg = subMsg
        self.body = body
        self.isError = isError
        self.buyerLogonId = buyerLogonId
        self.buyerOpenId = buyerOpenId
        self.buyerUserId = buyerUserId
        self.fundChange = fundChange
        self.gmtRefundPay = gmtRefundPay
        self.hasDepositBack = hasDepositBack
        self.openId = openId
        self.outTradeNo = outTradeNo
        self.preAuthCancelFee = preAuthCancelFee
        self.presentRefundBuyerAmount = presentRefundBuyerAmount
        self.presentRefundDiscountAmount = presentRefundDiscountAmount
        self.presentRefundMdiscountAmount = presentRefundMdiscountAmount
        self.refundChargeAmount = refundChargeAmount
        self.refundChargeInfoList = refundChargeInfoList
        self.refundCurrency = refundCurrency
        self.refundDetailItemList = refundDetailItemList
        self.refundFee = refundFee
        self.refundHybAmount = refundHybAmount
        self.refundPresetPaytoolList = refundPresetPaytoolList
        self.refundSettlementId = refundSettlementId
        self.refundVoucherDetailList = refundVoucherDetailList
        self.sendBackFee = sendBackFee
        self.storeName = storeName
        self.tradeNo = tradeNo
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case code
        case msg
        case subCode
        case subMsg
        case body
        case isError
        case buyerLogonId
        case buyerOpenId
        case buyerUserId
        case fundChange
        case gmtRefundPay
        case hasDepositBack
        case openId
        case outTradeNo
        case preAuthCancelFee
        case presentRefundBuyerAmount
        case presentRefundDiscountAmount
        case presentRefundMdiscountAmount
        case refundChargeAmount
        case refundChargeInfoList
        case refundCurrency
        case refundDetailItemList
        case refundFee
        case refundHybAmount
        case refundPresetPaytoolList
        case refundSettlementId
        case refundVoucherDetailList
        case sendBackFee
        case storeName
        case tradeNo
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(msg, forKey: .msg)
        try container.encodeIfPresent(subCode, forKey: .subCode)
        try container.encodeIfPresent(subMsg, forKey: .subMsg)
        try container.encodeIfPresent(body, forKey: .body)
        try container.encodeIfPresent(isError, forKey: .isError)
        try container.encodeIfPresent(buyerLogonId, forKey: .buyerLogonId)
        try container.encodeIfPresent(buyerOpenId, forKey: .buyerOpenId)
        try container.encodeIfPresent(buyerUserId, forKey: .buyerUserId)
        try container.encodeIfPresent(fundChange, forKey: .fundChange)
        try container.encodeIfPresent(gmtRefundPay, forKey: .gmtRefundPay)
        try container.encodeIfPresent(hasDepositBack, forKey: .hasDepositBack)
        try container.encodeIfPresent(openId, forKey: .openId)
        try container.encodeIfPresent(outTradeNo, forKey: .outTradeNo)
        try container.encodeIfPresent(preAuthCancelFee, forKey: .preAuthCancelFee)
        try container.encodeIfPresent(presentRefundBuyerAmount, forKey: .presentRefundBuyerAmount)
        try container.encodeIfPresent(presentRefundDiscountAmount, forKey: .presentRefundDiscountAmount)
        try container.encodeIfPresent(presentRefundMdiscountAmount, forKey: .presentRefundMdiscountAmount)
        try container.encodeIfPresent(refundChargeAmount, forKey: .refundChargeAmount)
        try container.encodeIfPresent(refundChargeInfoList, forKey: .refundChargeInfoList)
        try container.encodeIfPresent(refundCurrency, forKey: .refundCurrency)
        try container.encodeIfPresent(refundDetailItemList, forKey: .refundDetailItemList)
        try container.encodeIfPresent(refundFee, forKey: .refundFee)
        try container.encodeIfPresent(refundHybAmount, forKey: .refundHybAmount)
        try container.encodeIfPresent(refundPresetPaytoolList, forKey: .refundPresetPaytoolList)
        try container.encodeIfPresent(refundSettlementId, forKey: .refundSettlementId)
        try container.encodeIfPresent(refundVoucherDetailList, forKey: .refundVoucherDetailList)
        try container.encodeIfPresent(sendBackFee, forKey: .sendBackFee)
        try container.encodeIfPresent(storeName, forKey: .storeName)
        try container.encodeIfPresent(tradeNo, forKey: .tradeNo)
    }
}

