//
// UserAccessToken.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 用户令牌实体，用于管理用户的访问令牌及其相关信息。 */
public struct UserAccessToken: Codable, JSONEncodable, Hashable {

    public static let titleRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 用户令牌的唯一标识符。 */
    public var id: Int64?
    /** 与令牌关联的用户ID。 */
    public var userID: Int64?
    /** 指示令牌是否处于启用状态。 */
    public var enable: Bool?
    /** 令牌拥有的权限列表，多个权限以逗号分隔。 */
    public var permissions: String?
    /** 令牌的标题或名称，用于标识令牌。 */
    public var title: String?
    /** 访问令牌的具体值，用于身份验证。 */
    public var accessToken: String?
    /** 用于分类或标记令牌的标签。 */
    public var tags: String?
    /** 令牌的详细描述信息。 */
    public var description: String?
    /** 令牌的过期时间，超过该时间令牌将失效。 */
    public var expireTime: Date?
    /** 令牌的创建日期，默认为当前时间。 */
    public var createDate: Date?
    /** 令牌的最后更新日期，默认为当前时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, userID: Int64? = nil, enable: Bool? = nil, permissions: String? = nil, title: String? = nil, accessToken: String? = nil, tags: String? = nil, description: String? = nil, expireTime: Date? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.userID = userID
        self.enable = enable
        self.permissions = permissions
        self.title = title
        self.accessToken = accessToken
        self.tags = tags
        self.description = description
        self.expireTime = expireTime
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userID
        case enable
        case permissions
        case title
        case accessToken
        case tags
        case description
        case expireTime
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userID, forKey: .userID)
        try container.encodeIfPresent(enable, forKey: .enable)
        try container.encodeIfPresent(permissions, forKey: .permissions)
        try container.encodeIfPresent(title, forKey: .title)
        try container.encodeIfPresent(accessToken, forKey: .accessToken)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(expireTime, forKey: .expireTime)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension UserAccessToken: Identifiable {}
