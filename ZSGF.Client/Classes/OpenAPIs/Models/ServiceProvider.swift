//
// ServiceProvider.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 服务商实体，用于表示和管理系统中的服务提供方信息。 */
public struct ServiceProvider: Codable, JSONEncodable, Hashable {

    public static let bizCodeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let nameRule = StringRule(minLength: nil, maxLength: 100, pattern: nil)
    public static let codeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let iconRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 服务商的唯一标识符。 */
    public var id: Int64?
    /** 服务商的业务代码，用于标识其所属业务领域。 */
    public var bizCode: String?
    /** 服务商的名称。 */
    public var name: String?
    /** 服务商的唯一代码，用于系统内部标识。 */
    public var code: String?
    /** 服务商图标的URL或路径。 */
    public var icon: String?
    /** 服务商的详细描述信息。 */
    public var description: String?
    /** 用于分类或标记服务商的标签。 */
    public var tags: String?
    /** 指示服务商是否在界面上显示。 */
    public var show: Bool?
    /** 服务商在界面上的显示顺序。 */
    public var showIndex: Int?
    /** 服务商记录的创建日期，默认为当前时间。 */
    public var createDate: Date?
    /** 服务商记录的最后更新日期，默认为当前时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, bizCode: String? = nil, name: String? = nil, code: String? = nil, icon: String? = nil, description: String? = nil, tags: String? = nil, show: Bool? = nil, showIndex: Int? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.bizCode = bizCode
        self.name = name
        self.code = code
        self.icon = icon
        self.description = description
        self.tags = tags
        self.show = show
        self.showIndex = showIndex
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case bizCode
        case name
        case code
        case icon
        case description
        case tags
        case show
        case showIndex
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(bizCode, forKey: .bizCode)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(code, forKey: .code)
        try container.encodeIfPresent(icon, forKey: .icon)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(show, forKey: .show)
        try container.encodeIfPresent(showIndex, forKey: .showIndex)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension ServiceProvider: Identifiable {}
