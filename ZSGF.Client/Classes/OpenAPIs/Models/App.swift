//
// App.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 应用 */
public struct App: Codable, JSONEncodable, Hashable {

    public static let websiteRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let nameRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let logoRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let tagsRule = StringRule(minLength: 0, maxLength: 255, pattern: nil)
    public static let appKeyRule = StringRule(minLength: 0, maxLength: 50, pattern: nil)
    public static let appSecretRule = StringRule(minLength: 0, maxLength: 50, pattern: nil)
    public static let clientSecretRule = StringRule(minLength: 0, maxLength: 50, pattern: nil)
    public static let sshPublickeyRule = StringRule(minLength: 0, maxLength: 50, pattern: nil)
    /** 唯一标识符 */
    public var id: Int64?
    /** 用户 ID */
    public var userID: Int64?
    /** 项目 ID */
    public var projectID: Int64?
    /** 网站默认域名 */
    public var website: String?
    /** 名称 */
    public var name: String?
    /** Logo */
    public var logo: String?
    /** 描述 */
    public var description: String?
    /** 标签 */
    public var tags: String?
    /** 应用公钥 */
    public var appKey: String?
    /** 应用私密密钥 */
    public var appSecret: String?
    /** 客户端密钥 */
    public var clientSecret: String?
    /** SSH公钥 */
    public var sshPublickey: String?
    /** 是否共享 */
    public var share: Bool?
    /** 创建时间 */
    public var createDate: Date?
    /** 最后更新时间 */
    public var lastUpdate: Date?
    /** 是否显示 */
    public var show: Bool?
    /** 显示索引 */
    public var showIndex: Int64?

    public init(id: Int64? = nil, userID: Int64? = nil, projectID: Int64? = nil, website: String? = nil, name: String? = nil, logo: String? = nil, description: String? = nil, tags: String? = nil, appKey: String? = nil, appSecret: String? = nil, clientSecret: String? = nil, sshPublickey: String? = nil, share: Bool? = nil, createDate: Date? = nil, lastUpdate: Date? = nil, show: Bool? = nil, showIndex: Int64? = nil) {
        self.id = id
        self.userID = userID
        self.projectID = projectID
        self.website = website
        self.name = name
        self.logo = logo
        self.description = description
        self.tags = tags
        self.appKey = appKey
        self.appSecret = appSecret
        self.clientSecret = clientSecret
        self.sshPublickey = sshPublickey
        self.share = share
        self.createDate = createDate
        self.lastUpdate = lastUpdate
        self.show = show
        self.showIndex = showIndex
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userID
        case projectID
        case website
        case name
        case logo
        case description
        case tags
        case appKey
        case appSecret
        case clientSecret
        case sshPublickey
        case share
        case createDate
        case lastUpdate
        case show
        case showIndex
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userID, forKey: .userID)
        try container.encodeIfPresent(projectID, forKey: .projectID)
        try container.encodeIfPresent(website, forKey: .website)
        try container.encodeIfPresent(name, forKey: .name)
        try container.encodeIfPresent(logo, forKey: .logo)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(appKey, forKey: .appKey)
        try container.encodeIfPresent(appSecret, forKey: .appSecret)
        try container.encodeIfPresent(clientSecret, forKey: .clientSecret)
        try container.encodeIfPresent(sshPublickey, forKey: .sshPublickey)
        try container.encodeIfPresent(share, forKey: .share)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
        try container.encodeIfPresent(show, forKey: .show)
        try container.encodeIfPresent(showIndex, forKey: .showIndex)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension App: Identifiable {}
