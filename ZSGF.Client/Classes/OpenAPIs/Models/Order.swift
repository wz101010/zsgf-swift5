//
// Order.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** 订单实体，用于记录用户的订单信息。 */
public struct Order: Codable, JSONEncodable, Hashable {

    public static let payTypeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let orderNoRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let tradeNoRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let statusRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let productTypeRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let productIDRule = StringRule(minLength: nil, maxLength: 50, pattern: nil)
    public static let productNameRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let tagsRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    public static let remarkRule = StringRule(minLength: nil, maxLength: 255, pattern: nil)
    /** 订单的唯一标识符。 */
    public var id: Int64?
    /** 创建订单的用户ID。 */
    public var userID: Int64?
    /** 订单的支付类型，例如 '信用卡', '支付宝', '微信支付' 等。 */
    public var payType: String?
    /** 订单的总金额。 */
    public var amount: Double?
    /** 订单的唯一编号，通常由系统生成。 */
    public var orderNo: String?
    /** 与订单关联的交易编号，通常由支付平台提供。 */
    public var tradeNo: String?
    /** 订单的当前状态，例如 '待支付', '已完成', '已取消' 等。 */
    public var status: String?
    /** 订单中商品的类型分类。 */
    public var productType: String?
    /** 订单中商品的唯一标识符。 */
    public var productID: String?
    /** 订单中商品的名称。 */
    public var productName: String?
    /** 指示订单是否允许进行退款操作。 */
    public var allowRefund: Bool?
    /** 订单允许进行退款操作的截止时间。 */
    public var allowRefundUntil: Date?
    /** 用于分类或标记订单的标签。 */
    public var tags: String?
    /** 订单的额外备注信息。 */
    public var remark: String?
    /** 订单的详细描述信息。 */
    public var description: String?
    /** 订单完成支付的时间。 */
    public var orderPayTime: Date?
    /** 订单的过期时间，超过该时间订单将自动取消。 */
    public var expireTime: Date?
    /** 订单的创建时间，默认为当前时间。 */
    public var createDate: Date?
    /** 订单的最后更新时间，默认为当前时间。 */
    public var lastUpdate: Date?

    public init(id: Int64? = nil, userID: Int64? = nil, payType: String? = nil, amount: Double? = nil, orderNo: String? = nil, tradeNo: String? = nil, status: String? = nil, productType: String? = nil, productID: String? = nil, productName: String? = nil, allowRefund: Bool? = nil, allowRefundUntil: Date? = nil, tags: String? = nil, remark: String? = nil, description: String? = nil, orderPayTime: Date? = nil, expireTime: Date? = nil, createDate: Date? = nil, lastUpdate: Date? = nil) {
        self.id = id
        self.userID = userID
        self.payType = payType
        self.amount = amount
        self.orderNo = orderNo
        self.tradeNo = tradeNo
        self.status = status
        self.productType = productType
        self.productID = productID
        self.productName = productName
        self.allowRefund = allowRefund
        self.allowRefundUntil = allowRefundUntil
        self.tags = tags
        self.remark = remark
        self.description = description
        self.orderPayTime = orderPayTime
        self.expireTime = expireTime
        self.createDate = createDate
        self.lastUpdate = lastUpdate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case id
        case userID
        case payType
        case amount
        case orderNo
        case tradeNo
        case status
        case productType
        case productID
        case productName
        case allowRefund
        case allowRefundUntil
        case tags
        case remark
        case description
        case orderPayTime
        case expireTime
        case createDate
        case lastUpdate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(userID, forKey: .userID)
        try container.encodeIfPresent(payType, forKey: .payType)
        try container.encodeIfPresent(amount, forKey: .amount)
        try container.encodeIfPresent(orderNo, forKey: .orderNo)
        try container.encodeIfPresent(tradeNo, forKey: .tradeNo)
        try container.encodeIfPresent(status, forKey: .status)
        try container.encodeIfPresent(productType, forKey: .productType)
        try container.encodeIfPresent(productID, forKey: .productID)
        try container.encodeIfPresent(productName, forKey: .productName)
        try container.encodeIfPresent(allowRefund, forKey: .allowRefund)
        try container.encodeIfPresent(allowRefundUntil, forKey: .allowRefundUntil)
        try container.encodeIfPresent(tags, forKey: .tags)
        try container.encodeIfPresent(remark, forKey: .remark)
        try container.encodeIfPresent(description, forKey: .description)
        try container.encodeIfPresent(orderPayTime, forKey: .orderPayTime)
        try container.encodeIfPresent(expireTime, forKey: .expireTime)
        try container.encodeIfPresent(createDate, forKey: .createDate)
        try container.encodeIfPresent(lastUpdate, forKey: .lastUpdate)
    }
}


@available(iOS 13, tvOS 13, watchOS 6, macOS 10.15, *)
extension Order: Identifiable {}
