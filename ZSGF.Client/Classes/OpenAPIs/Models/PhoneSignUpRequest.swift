//
// PhoneSignUpRequest.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct PhoneSignUpRequest: Codable, JSONEncodable, Hashable {

    public static let phoneRule = StringRule(minLength: 1, maxLength: nil, pattern: nil)
    public static let phoneCodeRule = StringRule(minLength: 1, maxLength: nil, pattern: "/\\d{4,8}$/")
    public static let pwdRule = StringRule(minLength: 6, maxLength: 32, pattern: "/^[a-zA-Z0-9_\\-!@#$%^&*()]*$/")
    public static let emailCodeRule = StringRule(minLength: nil, maxLength: nil, pattern: "/\\d{4,8}$/")
    public static let nickNameRule = StringRule(minLength: 4, maxLength: 32, pattern: nil)
    public static let avatarRule = StringRule(minLength: nil, maxLength: 999, pattern: nil)
    public static let dataRule = StringRule(minLength: nil, maxLength: 9999, pattern: nil)
    /** 用户手机号 */
    public var phone: String
    /** 手机验证码，长度为4到8位的数字 */
    public var phoneCode: String
    /** 用户密码，长度为6到32个字符 */
    public var pwd: String
    /** 用户邮箱 */
    public var email: String?
    /** 邮箱验证码（只有启用的邮箱验证码功能时，才需要传入），长度为4到8位的数字 */
    public var emailCode: String?
    /** 用户昵称 */
    public var nickName: String?
    /** 用户头像URL */
    public var avatar: String?
    /** 自定义数据 */
    public var data: String?

    public init(phone: String, phoneCode: String, pwd: String, email: String? = nil, emailCode: String? = nil, nickName: String? = nil, avatar: String? = nil, data: String? = nil) {
        self.phone = phone
        self.phoneCode = phoneCode
        self.pwd = pwd
        self.email = email
        self.emailCode = emailCode
        self.nickName = nickName
        self.avatar = avatar
        self.data = data
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case phone
        case phoneCode
        case pwd
        case email
        case emailCode
        case nickName
        case avatar
        case data
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encode(phone, forKey: .phone)
        try container.encode(phoneCode, forKey: .phoneCode)
        try container.encode(pwd, forKey: .pwd)
        try container.encodeIfPresent(email, forKey: .email)
        try container.encodeIfPresent(emailCode, forKey: .emailCode)
        try container.encodeIfPresent(nickName, forKey: .nickName)
        try container.encodeIfPresent(avatar, forKey: .avatar)
        try container.encodeIfPresent(data, forKey: .data)
    }
}

