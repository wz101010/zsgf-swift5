//
// ChargeInfo.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ChargeInfo: Codable, JSONEncodable, Hashable {

    public var chargeFee: String?
    public var chargeType: String?
    public var isRatingOnSwitch: String?
    public var isRatingOnTradeReceiver: String?
    public var originalChargeFee: String?
    public var subFeeDetailList: [SubFee]?
    public var switchFeeRate: String?

    public init(chargeFee: String? = nil, chargeType: String? = nil, isRatingOnSwitch: String? = nil, isRatingOnTradeReceiver: String? = nil, originalChargeFee: String? = nil, subFeeDetailList: [SubFee]? = nil, switchFeeRate: String? = nil) {
        self.chargeFee = chargeFee
        self.chargeType = chargeType
        self.isRatingOnSwitch = isRatingOnSwitch
        self.isRatingOnTradeReceiver = isRatingOnTradeReceiver
        self.originalChargeFee = originalChargeFee
        self.subFeeDetailList = subFeeDetailList
        self.switchFeeRate = switchFeeRate
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case chargeFee
        case chargeType
        case isRatingOnSwitch
        case isRatingOnTradeReceiver
        case originalChargeFee
        case subFeeDetailList
        case switchFeeRate
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(chargeFee, forKey: .chargeFee)
        try container.encodeIfPresent(chargeType, forKey: .chargeType)
        try container.encodeIfPresent(isRatingOnSwitch, forKey: .isRatingOnSwitch)
        try container.encodeIfPresent(isRatingOnTradeReceiver, forKey: .isRatingOnTradeReceiver)
        try container.encodeIfPresent(originalChargeFee, forKey: .originalChargeFee)
        try container.encodeIfPresent(subFeeDetailList, forKey: .subFeeDetailList)
        try container.encodeIfPresent(switchFeeRate, forKey: .switchFeeRate)
    }
}

